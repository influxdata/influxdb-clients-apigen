diff --git a/Client.Test/ItTelegrafsApiTest.cs b/Client.Test/ItTelegrafsApiTest.cs
index ca5df13..168f574 100644
--- a/Client.Test/ItTelegrafsApiTest.cs
+++ b/Client.Test/ItTelegrafsApiTest.cs
@@ -37,7 +37,7 @@ namespace InfluxDB.Client.Test
                 {"report_active", false},
                 {"avoid_null", null},
             };
-            return new TelegrafPlugin(TelegrafPlugin.TypeEnum.Inputs, "cpu", config: config);
+            return new TelegrafPlugin(TelegrafPlugin.TypeEnum.Input, "cpu", config: config);
         }
 
         private static TelegrafPlugin NewOutputPlugin()
@@ -50,7 +50,7 @@ namespace InfluxDB.Client.Test
                 {"urls", new List<string> {"http://localhost:9999"}}
             };
 
-            return new TelegrafPlugin(TelegrafPlugin.TypeEnum.Outputs, "influxdb_v2", "my instance",
+            return new TelegrafPlugin(TelegrafPlugin.TypeEnum.Output, "influxdb_v2", "my instance",
                 config);
         }
 
diff --git a/Client/TelegrafsApi.cs b/Client/TelegrafsApi.cs
index fbaa0df..60fe11f 100644
--- a/Client/TelegrafsApi.cs
+++ b/Client/TelegrafsApi.cs
@@ -112,8 +112,17 @@ namespace InfluxDB.Client
                 config.Append("\n");
             }
 
-            var request = new TelegrafRequest(name: name, description: description, orgID: orgId,
-                config: config.ToString());
+            var pluginsList = plugins
+                .Select(it => new TelegrafPluginRequestPlugins(
+                    it.Type.ToString().ToLower(),
+                    it.Name,
+                    description: it.Description,
+                    config: it.Config)
+                )
+                .ToList();
+
+            var request = new TelegrafPluginRequest(name, description, orgID: orgId, config: config.ToString(),
+                plugins: pluginsList);
 
             return CreateTelegrafAsync(request);
         }
@@ -126,11 +135,12 @@ namespace InfluxDB.Client
         /// <param name="org">The organization that owns this config</param>
         /// <param name="config">ConfigTOML contains the raw toml config</param>
         /// <param name="metadata">Metadata for the config</param>
+        /// <param name="plugins">Plugins to use.</param>
         /// <returns>Telegraf config created</returns>
         public Task<Telegraf> CreateTelegrafAsync(string name, string description, Organization org,
-            string config, TelegrafRequestMetadata metadata)
+            string config, TelegrafRequestMetadata metadata, List<TelegrafPluginRequestPlugins> plugins)
         {
-            return CreateTelegrafAsync(name, description, org.Id, config, metadata);
+            return CreateTelegrafAsync(name, description, org.Id, config, metadata, plugins);
         }
 
         /// <summary>
@@ -141,11 +151,12 @@ namespace InfluxDB.Client
         /// <param name="orgId">The organization that owns this config</param>
         /// <param name="config">ConfigTOML contains the raw toml config</param>
         /// <param name="metadata">Metadata for the config</param>
+        /// <param name="plugins">Plugins to use.</param>
         /// <returns>Telegraf config created</returns>
         public Task<Telegraf> CreateTelegrafAsync(string name, string description, string orgId,
-            string config, TelegrafRequestMetadata metadata)
+            string config, TelegrafRequestMetadata metadata, List<TelegrafPluginRequestPlugins> plugins)
         {
-            var request = new TelegrafRequest(name, description, metadata, config, orgId);
+            var request = new TelegrafPluginRequest(name, description, plugins, metadata, config, orgId);
 
             return CreateTelegrafAsync(request);
         }
@@ -155,7 +166,7 @@ namespace InfluxDB.Client
         /// </summary>
         /// <param name="telegrafRequest">Telegraf Configuration to create</param>
         /// <returns>Telegraf config created</returns>
-        public Task<Telegraf> CreateTelegrafAsync(TelegrafRequest telegrafRequest)
+        public Task<Telegraf> CreateTelegrafAsync(TelegrafPluginRequest telegrafRequest)
         {
             Arguments.CheckNotNull(telegrafRequest, nameof(telegrafRequest));
 
@@ -201,7 +212,7 @@ namespace InfluxDB.Client
         {
             Arguments.CheckNotNull(telegraf, nameof(telegraf));
 
-            var request = new TelegrafRequest(telegraf.Name, telegraf.Description, telegraf.Metadata, telegraf.Config,
+            var request = new TelegrafPluginRequest(telegraf.Name, telegraf.Description, default, telegraf.Metadata, telegraf.Config,
                 telegraf.OrgID);
 
             return UpdateTelegrafAsync(telegraf.Id, request);
@@ -213,7 +224,7 @@ namespace InfluxDB.Client
         /// <param name="telegrafId">ID of telegraf config</param>
         /// <param name="telegrafRequest">telegraf config update to apply</param>
         /// <returns>An updated telegraf</returns>
-        public Task<Telegraf> UpdateTelegrafAsync(string telegrafId, TelegrafRequest telegrafRequest)
+        public Task<Telegraf> UpdateTelegrafAsync(string telegrafId, TelegrafPluginRequest telegrafRequest)
         {
             Arguments.CheckNonEmptyString(telegrafId, nameof(telegrafId));
             Arguments.CheckNotNull(telegrafRequest, nameof(telegrafRequest));
@@ -272,7 +283,7 @@ namespace InfluxDB.Client
             Arguments.CheckNonEmptyString(clonedName, nameof(clonedName));
             Arguments.CheckNotNull(telegraf, nameof(telegraf));
 
-            var cloned = new TelegrafRequest(clonedName, telegraf.Description, telegraf.Metadata, telegraf.Config,
+            var cloned = new TelegrafPluginRequest(clonedName, telegraf.Description, default, telegraf.Metadata, telegraf.Config,
                 telegraf.OrgID);
 
             var created = await CreateTelegrafAsync(cloned).ConfigureAwait(false);
