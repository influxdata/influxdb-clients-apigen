diff --git a/client/src/generated/java/com/influxdb/client/service/TemplatesService.java b/client/src/generated/java/com/influxdb/client/service/TemplatesService.java
deleted file mode 100644
index 9739083831..0000000000
--- a/client/src/generated/java/com/influxdb/client/service/TemplatesService.java
+++ /dev/null
@@ -1,134 +0,0 @@
-package com.influxdb.client.service;
-
-import retrofit2.Call;
-import retrofit2.http.*;
-
-import okhttp3.RequestBody;
-import okhttp3.ResponseBody;
-import okhttp3.MultipartBody;
-
-import com.influxdb.client.domain.Document;
-import com.influxdb.client.domain.DocumentCreate;
-import com.influxdb.client.domain.DocumentUpdate;
-import com.influxdb.client.domain.Documents;
-import com.influxdb.client.domain.Error;
-import com.influxdb.client.domain.LabelMapping;
-import com.influxdb.client.domain.LabelResponse;
-import com.influxdb.client.domain.LabelsResponse;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-public interface TemplatesService {
-  /**
-   * Delete a template
-   * 
-   * @param templateID The template ID. (required)
-   * @param zapTraceSpan OpenTracing span context (optional)
-   * @return Call&lt;Void&gt;
-   */
-  @DELETE("api/v2/documents/templates/{templateID}")
-  Call<Void> deleteDocumentsTemplatesID(
-    @retrofit2.http.Path("templateID") String templateID, @retrofit2.http.Header("Zap-Trace-Span") String zapTraceSpan
-  );
-
-  /**
-   * Delete a label from a template
-   * 
-   * @param templateID The template ID. (required)
-   * @param labelID The label ID. (required)
-   * @param zapTraceSpan OpenTracing span context (optional)
-   * @return Call&lt;Void&gt;
-   */
-  @DELETE("api/v2/documents/templates/{templateID}/labels/{labelID}")
-  Call<Void> deleteDocumentsTemplatesIDLabelsID(
-    @retrofit2.http.Path("templateID") String templateID, @retrofit2.http.Path("labelID") String labelID, @retrofit2.http.Header("Zap-Trace-Span") String zapTraceSpan
-  );
-
-  /**
-   * List all templates
-   * 
-   * @param zapTraceSpan OpenTracing span context (optional)
-   * @param org Specifies the name of the organization of the template. (optional)
-   * @param orgID Specifies the organization ID of the template. (optional)
-   * @return Call&lt;Documents&gt;
-   */
-  @GET("api/v2/documents/templates")
-  Call<Documents> getDocumentsTemplates(
-    @retrofit2.http.Header("Zap-Trace-Span") String zapTraceSpan, @retrofit2.http.Query("org") String org, @retrofit2.http.Query("orgID") String orgID
-  );
-
-  /**
-   * Retrieve a template
-   * 
-   * @param templateID The template ID. (required)
-   * @param zapTraceSpan OpenTracing span context (optional)
-   * @return Call&lt;Document&gt;
-   */
-  @GET("api/v2/documents/templates/{templateID}")
-  Call<Document> getDocumentsTemplatesID(
-    @retrofit2.http.Path("templateID") String templateID, @retrofit2.http.Header("Zap-Trace-Span") String zapTraceSpan
-  );
-
-  /**
-   * List all labels for a template
-   * 
-   * @param templateID The template ID. (required)
-   * @param zapTraceSpan OpenTracing span context (optional)
-   * @return Call&lt;LabelsResponse&gt;
-   */
-  @GET("api/v2/documents/templates/{templateID}/labels")
-  Call<LabelsResponse> getDocumentsTemplatesIDLabels(
-    @retrofit2.http.Path("templateID") String templateID, @retrofit2.http.Header("Zap-Trace-Span") String zapTraceSpan
-  );
-
-  /**
-   * Create a template
-   * 
-   * @param documentCreate Template that will be created (required)
-   * @param zapTraceSpan OpenTracing span context (optional)
-   * @return Call&lt;Document&gt;
-   */
-  @Headers({
-    "Content-Type:application/json"
-  })
-  @POST("api/v2/documents/templates")
-  Call<Document> postDocumentsTemplates(
-    @retrofit2.http.Body DocumentCreate documentCreate, @retrofit2.http.Header("Zap-Trace-Span") String zapTraceSpan
-  );
-
-  /**
-   * Add a label to a template
-   * 
-   * @param templateID The template ID. (required)
-   * @param labelMapping Label to add (required)
-   * @param zapTraceSpan OpenTracing span context (optional)
-   * @return Call&lt;LabelResponse&gt;
-   */
-  @Headers({
-    "Content-Type:application/json"
-  })
-  @POST("api/v2/documents/templates/{templateID}/labels")
-  Call<LabelResponse> postDocumentsTemplatesIDLabels(
-    @retrofit2.http.Path("templateID") String templateID, @retrofit2.http.Body LabelMapping labelMapping, @retrofit2.http.Header("Zap-Trace-Span") String zapTraceSpan
-  );
-
-  /**
-   * Update a template
-   * 
-   * @param templateID The template ID. (required)
-   * @param documentUpdate Template that will be updated (required)
-   * @param zapTraceSpan OpenTracing span context (optional)
-   * @return Call&lt;Document&gt;
-   */
-  @Headers({
-    "Content-Type:application/json"
-  })
-  @PUT("api/v2/documents/templates/{templateID}")
-  Call<Document> putDocumentsTemplatesID(
-    @retrofit2.http.Path("templateID") String templateID, @retrofit2.http.Body DocumentUpdate documentUpdate, @retrofit2.http.Header("Zap-Trace-Span") String zapTraceSpan
-  );
-
-}
diff --git a/client/src/main/java/com/influxdb/client/InfluxDBClient.java b/client/src/main/java/com/influxdb/client/InfluxDBClient.java
index 601538d7e8..d19531bbec 100644
--- a/client/src/main/java/com/influxdb/client/InfluxDBClient.java
+++ b/client/src/main/java/com/influxdb/client/InfluxDBClient.java
@@ -30,7 +30,6 @@ import com.influxdb.client.domain.Authorization;
 import com.influxdb.client.domain.Bucket;
 import com.influxdb.client.domain.Check;
 import com.influxdb.client.domain.Dashboard;
-import com.influxdb.client.domain.Document;
 import com.influxdb.client.domain.HealthCheck;
 import com.influxdb.client.domain.Label;
 import com.influxdb.client.domain.NotificationEndpoint;
@@ -197,14 +196,6 @@ public interface InfluxDBClient extends AutoCloseable {
     @Nonnull
     LabelsApi getLabelsApi();
 
-    /**
-     * Create a new {@link Document} client.
-     *
-     * @return the new client instance for Template API
-     */
-    @Nonnull
-    TemplatesApi getTemplatesApi();
-
     /**
      * Create a new {@link Variable} client.
      *
diff --git a/client/src/main/java/com/influxdb/client/TemplatesApi.java b/client/src/main/java/com/influxdb/client/TemplatesApi.java
deleted file mode 100644
index cf4865d766..0000000000
--- a/client/src/main/java/com/influxdb/client/TemplatesApi.java
+++ /dev/null
@@ -1,184 +0,0 @@
-/*
- * The MIT License
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- */
-package com.influxdb.client;
-
-import java.util.List;
-import javax.annotation.Nonnull;
-import javax.annotation.concurrent.ThreadSafe;
-
-import com.influxdb.client.domain.Document;
-import com.influxdb.client.domain.DocumentCreate;
-import com.influxdb.client.domain.DocumentListEntry;
-import com.influxdb.client.domain.DocumentUpdate;
-import com.influxdb.client.domain.Label;
-import com.influxdb.client.domain.LabelResponse;
-import com.influxdb.client.domain.Organization;
-
-/**
- * @author Jakub Bednar (bednar@github) (25/03/2019 09:11)
- */
-@ThreadSafe
-public interface TemplatesApi {
-
-    /**
-     * Create a template.
-     *
-     * @param templateCreate template that will be created
-     * @return Template created
-     */
-    @Nonnull
-    Document createTemplate(@Nonnull final DocumentCreate templateCreate);
-
-    /**
-     * Update a template.
-     *
-     * @param template template that will be updated
-     * @return the newly updated template
-     */
-    @Nonnull
-    Document updateTemplate(@Nonnull final Document template);
-
-    /**
-     * Update a template.
-     *
-     * @param templateID ID of template
-     * @param template   template that will be updated
-     * @return the newly updated template
-     */
-    @Nonnull
-    Document updateTemplate(@Nonnull final String templateID, @Nonnull final DocumentUpdate template);
-
-    /**
-     * Delete a template.
-     *
-     * @param template template to delete
-     */
-    void deleteTemplate(@Nonnull final Document template);
-
-    /**
-     * Delete a template.
-     *
-     * @param templateID ID of template to delete
-     */
-    void deleteTemplate(@Nonnull final String templateID);
-
-    /**
-     * List all labels for a template.
-     *
-     * @param template the template
-     * @return return a list of all labels for a template
-     */
-    @Nonnull
-    List<Label> getLabels(@Nonnull final Document template);
-
-    /**
-     * List all labels for a template.
-     *
-     * @param templateID ID of template
-     * @return return a list of all labels for a template
-     */
-    @Nonnull
-    List<Label> getLabels(@Nonnull final String templateID);
-
-    /**
-     * Add a label to a template.
-     *
-     * @param label    label to add
-     * @param template the template
-     * @return added label
-     */
-    @Nonnull
-    LabelResponse addLabel(@Nonnull final Label label, @Nonnull final Document template);
-
-    /**
-     * Add a label to a template.
-     *
-     * @param templateID ID of template
-     * @param labelID    the ID of label to add
-     * @return added label
-     */
-    @Nonnull
-    LabelResponse addLabel(@Nonnull final String labelID, @Nonnull final String templateID);
-
-    /**
-     * Delete a label from a template.
-     *
-     * @param label    the label
-     * @param template the template
-     */
-    void deleteLabel(@Nonnull final Label label, @Nonnull final Document template);
-
-    /**
-     * Delete a label from a template.
-     *
-     * @param templateID   ID of template
-     * @param labelID the label ID
-     */
-    void deleteLabel(@Nonnull final String labelID, @Nonnull final String templateID);
-
-    /**
-     * Clone a template.
-     *
-     * @param clonedName name of cloned template
-     * @param templateID ID of template to clone
-     * @return cloned template
-     */
-    @Nonnull
-    Document cloneTemplate(@Nonnull final String clonedName, @Nonnull final String templateID);
-
-    /**
-     * Clone a template.
-     *
-     * @param clonedName name of cloned template
-     * @param template   template to clone
-     * @return cloned template
-     */
-    @Nonnull
-    Document cloneTemplate(@Nonnull final String clonedName, @Nonnull final Document template);
-
-    /**
-     * Retrieve a template.
-     *
-     * @param templateID ID of template
-     * @return the template requested
-     */
-    @Nonnull
-    Document findTemplateByID(@Nonnull final String templateID);
-
-    /**
-     * List of template documents.
-     *
-     * @param organization specifies the organization of the template (required)
-     * @return a list of template documents
-     */
-    @Nonnull
-    List<DocumentListEntry> findTemplates(@Nonnull final Organization organization);
-
-    /**
-     * List of template documents.
-     *
-     * @param orgName specifies the name of the organization of the template (required)
-     * @return a list of template documents
-     */
-    @Nonnull
-    List<DocumentListEntry> findTemplates(@Nonnull final String orgName);
-}
\ No newline at end of file
diff --git a/client/src/main/java/com/influxdb/client/internal/InfluxDBClientImpl.java b/client/src/main/java/com/influxdb/client/internal/InfluxDBClientImpl.java
index a3a448e0ee..cabbd72b32 100644
--- a/client/src/main/java/com/influxdb/client/internal/InfluxDBClientImpl.java
+++ b/client/src/main/java/com/influxdb/client/internal/InfluxDBClientImpl.java
@@ -44,7 +44,6 @@ import com.influxdb.client.ScraperTargetsApi;
 import com.influxdb.client.SourcesApi;
 import com.influxdb.client.TasksApi;
 import com.influxdb.client.TelegrafsApi;
-import com.influxdb.client.TemplatesApi;
 import com.influxdb.client.UsersApi;
 import com.influxdb.client.VariablesApi;
 import com.influxdb.client.WriteApi;
@@ -72,7 +71,6 @@ import com.influxdb.client.service.SetupService;
 import com.influxdb.client.service.SourcesService;
 import com.influxdb.client.service.TasksService;
 import com.influxdb.client.service.TelegrafsService;
-import com.influxdb.client.service.TemplatesService;
 import com.influxdb.client.service.UsersService;
 import com.influxdb.client.service.VariablesService;
 import com.influxdb.client.service.WriteService;
@@ -205,12 +203,6 @@ public final class InfluxDBClientImpl extends AbstractInfluxDBClient implements
         return new LabelsApiImpl(retrofit.create(LabelsService.class));
     }
 
-    @Nonnull
-    @Override
-    public TemplatesApi getTemplatesApi() {
-        return new TemplatesApiImpl(retrofit.create(TemplatesService.class));
-    }
-
     @Nonnull
     @Override
     public VariablesApi getVariablesApi() {
diff --git a/client/src/main/java/com/influxdb/client/internal/TasksApiImpl.java b/client/src/main/java/com/influxdb/client/internal/TasksApiImpl.java
index 2ad4e11bb4..aec9e1f792 100644
--- a/client/src/main/java/com/influxdb/client/internal/TasksApiImpl.java
+++ b/client/src/main/java/com/influxdb/client/internal/TasksApiImpl.java
@@ -126,7 +126,7 @@ final class TasksApiImpl extends AbstractRestClient implements TasksApi {
                                 @Nullable final String userID,
                                 @Nullable final String orgID) {
 
-        Call<Tasks> call = service.getTasks(null, null, afterID, userID, null, orgID, null, null);
+        Call<Tasks> call = service.getTasks(null, null, afterID, userID, null, orgID, null, null, null);
 
         Tasks tasks = execute(call);
         LOG.log(Level.FINEST, "findTasks found: {0}", tasks);
diff --git a/client/src/main/java/com/influxdb/client/internal/TemplatesApiImpl.java b/client/src/main/java/com/influxdb/client/internal/TemplatesApiImpl.java
deleted file mode 100644
index 9e60c1faa0..0000000000
--- a/client/src/main/java/com/influxdb/client/internal/TemplatesApiImpl.java
+++ /dev/null
@@ -1,239 +0,0 @@
-/*
- * The MIT License
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- */
-package com.influxdb.client.internal;
-
-import java.util.List;
-import javax.annotation.Nonnull;
-
-import com.influxdb.Arguments;
-import com.influxdb.client.TemplatesApi;
-import com.influxdb.client.domain.Document;
-import com.influxdb.client.domain.DocumentCreate;
-import com.influxdb.client.domain.DocumentListEntry;
-import com.influxdb.client.domain.DocumentUpdate;
-import com.influxdb.client.domain.Documents;
-import com.influxdb.client.domain.Label;
-import com.influxdb.client.domain.LabelMapping;
-import com.influxdb.client.domain.LabelResponse;
-import com.influxdb.client.domain.LabelsResponse;
-import com.influxdb.client.domain.Organization;
-import com.influxdb.client.service.TemplatesService;
-import com.influxdb.internal.AbstractRestClient;
-
-import retrofit2.Call;
-
-/**
- * @author Jakub Bednar (bednar@github) (25/03/2019 09:45)
- */
-final class TemplatesApiImpl extends AbstractRestClient implements TemplatesApi {
-
-    private final TemplatesService service;
-
-    TemplatesApiImpl(@Nonnull final TemplatesService service) {
-
-        Arguments.checkNotNull(service, "service");
-
-        this.service = service;
-    }
-
-    @Nonnull
-    @Override
-    public Document createTemplate(@Nonnull final DocumentCreate templateCreate) {
-
-        Arguments.checkNotNull(templateCreate, "documentCreate");
-
-        Call<Document> call = service.postDocumentsTemplates(templateCreate, null);
-
-        return execute(call);
-    }
-
-    @Nonnull
-    @Override
-    public Document updateTemplate(@Nonnull final Document template) {
-
-        Arguments.checkNotNull(template, "template");
-
-        DocumentUpdate update = new DocumentUpdate()
-                .meta(template.getMeta())
-                .content(template.getContent());
-
-        return updateTemplate(template.getId(), update);
-    }
-
-    @Nonnull
-    @Override
-    public Document updateTemplate(@Nonnull final String templateID,
-                                   @Nonnull final DocumentUpdate template) {
-
-        Arguments.checkNonEmpty(templateID, "templateID");
-        Arguments.checkNotNull(template, "template");
-
-        Call<Document> call = service.putDocumentsTemplatesID(templateID, template, null);
-
-        return execute(call);
-    }
-
-    @Override
-    public void deleteTemplate(@Nonnull final Document template) {
-
-        Arguments.checkNotNull(template, "template");
-
-        deleteTemplate(template.getId());
-    }
-
-    @Override
-    public void deleteTemplate(@Nonnull final String templateID) {
-
-        Arguments.checkNonEmpty(templateID, "templateID");
-
-        Call<Void> call = service.deleteDocumentsTemplatesID(templateID, null);
-
-        execute(call);
-    }
-
-    @Nonnull
-    @Override
-    public List<Label> getLabels(@Nonnull final Document template) {
-
-        Arguments.checkNotNull(template, "template");
-
-        return getLabels(template.getId());
-    }
-
-    @Nonnull
-    @Override
-    public List<Label> getLabels(@Nonnull final String templateID) {
-
-        Arguments.checkNonEmpty(templateID, "templateID");
-
-        Call<LabelsResponse> call = service.getDocumentsTemplatesIDLabels(templateID, null);
-
-        return execute(call).getLabels();
-    }
-
-    @Nonnull
-    @Override
-    public LabelResponse addLabel(@Nonnull final Label label, @Nonnull final Document template) {
-
-        Arguments.checkNotNull(label, "label");
-        Arguments.checkNotNull(template, "template");
-
-
-        return addLabel(label.getId(), template.getId());
-    }
-
-    @Nonnull
-    @Override
-    public LabelResponse addLabel(@Nonnull final String labelID, @Nonnull final String templateID) {
-
-        Arguments.checkNonEmpty(labelID, "labelID");
-        Arguments.checkNonEmpty(templateID, "templateID");
-
-        LabelMapping mapping = new LabelMapping()
-                .labelID(labelID);
-
-        Call<LabelResponse> call = service.postDocumentsTemplatesIDLabels(templateID, mapping, null);
-
-        return execute(call);
-    }
-
-    @Override
-    public void deleteLabel(@Nonnull final Label label, @Nonnull final Document template) {
-
-        Arguments.checkNotNull(label, "label");
-        Arguments.checkNotNull(template, "template");
-
-        deleteLabel(label.getId(), template.getId());
-
-    }
-
-    @Override
-    public void deleteLabel(@Nonnull final String labelID, @Nonnull final String templateID) {
-
-        Arguments.checkNonEmpty(labelID, "labelID");
-        Arguments.checkNonEmpty(templateID, "templateID");
-
-        Call<Void> call = service.deleteDocumentsTemplatesIDLabelsID(templateID, labelID, null);
-
-        execute(call);
-    }
-
-    @Nonnull
-    @Override
-    public Document cloneTemplate(@Nonnull final String clonedName, @Nonnull final String templateID) {
-
-        Arguments.checkNonEmpty(templateID, "templateID");
-
-        return cloneTemplate(clonedName, findTemplateByID(templateID));
-    }
-
-    @Nonnull
-    @Override
-    public Document cloneTemplate(@Nonnull final String clonedName, @Nonnull final Document template) {
-
-        Arguments.checkNonEmpty(clonedName, "clonedName");
-        Arguments.checkNotNull(template, "template");
-
-        DocumentCreate documentCreate = new DocumentCreate();
-        documentCreate
-                .meta(template.getMeta().name(clonedName).description(template.getMeta().getDescription()))
-                .content(template.getContent());
-
-        if (template.getLabels() != null) {
-
-            template.getLabels().forEach(label -> documentCreate.addLabelsItem(label.getName()));
-        }
-
-        return createTemplate(documentCreate);
-    }
-
-    @Nonnull
-    @Override
-    public Document findTemplateByID(@Nonnull final String templateID) {
-
-        Arguments.checkNonEmpty(templateID, "templateID");
-
-        Call<Document> call = service.getDocumentsTemplatesID(templateID, null);
-
-        return execute(call);
-    }
-
-    @Nonnull
-    @Override
-    public List<DocumentListEntry> findTemplates(@Nonnull final Organization organization) {
-
-        Arguments.checkNotNull(organization, "organization");
-
-        return findTemplates(organization.getName());
-    }
-
-    @Nonnull
-    @Override
-    public List<DocumentListEntry> findTemplates(@Nonnull final String orgName) {
-
-        Arguments.checkNonEmpty(orgName, "orgName");
-
-        Call<Documents> call = service.getDocumentsTemplates(null, orgName, null);
-
-        return execute(call).getDocuments();
-    }
-}
\ No newline at end of file
diff --git a/client/src/test/java/com/influxdb/client/ITTemplatesApi.java b/client/src/test/java/com/influxdb/client/ITTemplatesApi.java
deleted file mode 100644
index 11ab8b28e2..0000000000
--- a/client/src/test/java/com/influxdb/client/ITTemplatesApi.java
+++ /dev/null
@@ -1,350 +0,0 @@
-/*
- * The MIT License
- *
- * Permission is hereby granted, free of charge, to any person obtaining a copy
- * of this software and associated documentation files (the "Software"), to deal
- * in the Software without restriction, including without limitation the rights
- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
- * copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
- * THE SOFTWARE.
- */
-package com.influxdb.client;
-
-import java.time.OffsetDateTime;
-import java.time.ZoneOffset;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nonnull;
-
-import com.influxdb.client.domain.Document;
-import com.influxdb.client.domain.DocumentCreate;
-import com.influxdb.client.domain.DocumentListEntry;
-import com.influxdb.client.domain.DocumentMeta;
-import com.influxdb.client.domain.Label;
-import com.influxdb.client.domain.LabelCreateRequest;
-import com.influxdb.client.domain.Organization;
-import com.influxdb.exceptions.BadRequestException;
-import com.influxdb.exceptions.NotFoundException;
-
-import org.assertj.core.api.Assertions;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Disabled;
-import org.junit.jupiter.api.Test;
-import org.junit.platform.runner.JUnitPlatform;
-import org.junit.runner.RunWith;
-
-/**
- * @author Jakub Bednar (bednar@github) (25/03/2019 09:52)
- */
-@RunWith(JUnitPlatform.class)
-@Disabled("https://github.com/influxdata/influxdb/issues/20163")
-class ITTemplatesApi extends AbstractITClientTest {
-
-    private TemplatesApi templatesApi;
-    private Organization organization;
-
-    @BeforeEach
-    void setUp() {
-
-        templatesApi = influxDBClient.getTemplatesApi();
-        organization = findMyOrg();
-
-        templatesApi.findTemplates(organization)
-                .forEach(documentListEntry -> templatesApi.deleteTemplate(documentListEntry.getId()));
-    }
-
-    @Test
-    @Disabled("https://github.com/influxdata/influxdb/issues/17245")
-    void create() {
-
-        OffsetDateTime now = OffsetDateTime.now(ZoneOffset.UTC);
-
-        LabelCreateRequest labelCreateRequest = new LabelCreateRequest();
-        labelCreateRequest.setOrgID(organization.getId());
-        labelCreateRequest.setName(generateName("label"));
-        labelCreateRequest.putPropertiesItem("color", "red");
-        labelCreateRequest.putPropertiesItem("priority", "top");
-
-        Label label = influxDBClient.getLabelsApi().createLabel(labelCreateRequest);
-
-        DocumentMeta meta = new DocumentMeta();
-        meta.setName(generateName("document-name"));
-        meta.setType("testing");
-        meta.setVersion("1");
-        meta.setDescription(" meta description ");
-
-        DocumentCreate documentCreate = new DocumentCreate();
-        documentCreate.setMeta(meta);
-        documentCreate.setOrgID(organization.getId());
-        documentCreate.setContent("templates content");
-
-        ArrayList<String> labels = new ArrayList<>();
-        labels.add(label.getId());
-        documentCreate.setLabels(labels);
-
-        Document template = templatesApi.createTemplate(documentCreate);
-
-        Assertions.assertThat(template).isNotNull();
-        Assertions.assertThat(template.getId()).isNotBlank();
-        Assertions.assertThat(template.getContent()).isEqualTo("templates content");
-        Assertions.assertThat(template.getMeta()).isNotNull();
-        Assertions.assertThat(template.getMeta().getName()).isEqualTo(meta.getName());
-        Assertions.assertThat(template.getMeta().getVersion()).isEqualTo("1");
-        Assertions.assertThat(template.getMeta().getType()).isEqualTo("testing");
-        Assertions.assertThat(template.getMeta().getDescription()).isEqualTo(" meta description ");
-        Assertions.assertThat(template.getMeta().getCreatedAt()).isAfter(now);
-        Assertions.assertThat(template.getLinks()).isNotNull();
-        Assertions.assertThat(template.getLinks().getSelf()).isEqualTo("/api/v2/documents/templates/" + template.getId());
-
-        Assertions.assertThat(template.getLabels()).hasSize(1);
-        Assertions.assertThat(template.getLabels().get(0).getName()).isEqualTo(labelCreateRequest.getName());
-    }
-
-    @Test
-    void createEmpty() {
-
-        Assertions.assertThatThrownBy(() -> templatesApi.createTemplate(new DocumentCreate()))
-                .isInstanceOf(BadRequestException.class)
-                .hasMessage("missing document body");
-    }
-
-    @Test
-    void notExistLabel() {
-
-        DocumentCreate documentCreate = createDoc();
-
-        ArrayList<String> labels = new ArrayList<>();
-        labels.add("020f755c3c082000");
-        documentCreate.setLabels(labels);
-
-        Assertions.assertThatThrownBy(() -> templatesApi.createTemplate(documentCreate))
-                .isInstanceOf(NotFoundException.class)
-                .hasMessage("label not found");
-    }
-
-    @Test
-    void deleteTemplate() {
-
-        DocumentCreate documentCreate = createDoc();
-
-        Document createdTemplate = templatesApi.createTemplate(documentCreate);
-        Assertions.assertThat(createdTemplate).isNotNull();
-
-        Document foundTemplate = templatesApi.findTemplateByID(createdTemplate.getId());
-        Assertions.assertThat(foundTemplate).isNotNull();
-
-        // delete template
-        templatesApi.deleteTemplate(createdTemplate);
-
-        Assertions.assertThatThrownBy(() -> templatesApi.findTemplateByID(createdTemplate.getId()))
-                .isInstanceOf(NotFoundException.class);
-    }
-
-    @Test
-    void findTemplateByID() {
-
-        Document template = templatesApi.createTemplate(createDoc());
-
-        Document templateByID = templatesApi.findTemplateByID(template.getId());
-
-        Assertions.assertThat(templateByID).isNotNull();
-        Assertions.assertThat(templateByID.getId()).isEqualTo(template.getId());
-        Assertions.assertThat(templateByID.getMeta().getName()).isEqualTo(template.getMeta().getName());
-    }
-
-    @Test
-    void findTemplateByIDNull() {
-
-        Assertions.assertThatThrownBy(() -> templatesApi.findTemplateByID("020f755c3c082000"))
-                .isInstanceOf(NotFoundException.class)
-                .hasMessage("document not found");
-    }
-
-    @Test
-    void findTemplates() {
-
-        Organization org = influxDBClient.getOrganizationsApi().createOrganization(generateName("org"));
-
-        LabelCreateRequest labelCreateRequest = new LabelCreateRequest();
-        labelCreateRequest.setOrgID(organization.getId());
-        labelCreateRequest.setName(generateName("label"));
-        labelCreateRequest.putPropertiesItem("color", "red");
-        labelCreateRequest.putPropertiesItem("priority", "top");
-
-        Label label = influxDBClient.getLabelsApi().createLabel(labelCreateRequest);
-
-        List<DocumentListEntry> templates = templatesApi.findTemplates(org);
-        Assertions.assertThat(templates).isEmpty();
-
-        DocumentMeta meta = new DocumentMeta();
-        meta.setName(generateName("document-name"));
-        meta.setVersion("1");
-
-        DocumentCreate documentCreate = new DocumentCreate();
-        documentCreate.setMeta(meta);
-        documentCreate.setOrgID(org.getId());
-        documentCreate.setContent("templates content");
-        documentCreate.setLabels(Arrays.asList(label.getId()));
-
-        templatesApi.createTemplate(documentCreate);
-        templates = templatesApi.findTemplates(org);
-        Assertions.assertThat(templates).hasSize(1);
-
-        DocumentListEntry entry = templates.get(0);
-        Assertions.assertThat(entry.getId()).isNotBlank();
-        Assertions.assertThat(entry.getMeta()).isNotNull();
-        Assertions.assertThat(entry.getMeta().getVersion()).isEqualTo("1");
-        Assertions.assertThat(entry.getMeta().getName()).isEqualTo(meta.getName());
-        Assertions.assertThat(entry.getLinks()).isNotNull();
-        Assertions.assertThat(entry.getLinks().getSelf()).isEqualTo("/api/v2/documents/templates/" + entry.getId());
-
-        Assertions.assertThat(entry.getLabels()).hasSize(1);
-        Assertions.assertThat(entry.getLabels().get(0).getName()).isEqualTo(labelCreateRequest.getName());
-
-        //delete
-        templatesApi.deleteTemplate(entry.getId());
-    }
-
-    @Test
-    void findTemplatesNotFound() {
-
-        Assertions.assertThatThrownBy(() -> templatesApi.findTemplates("020f755c3c082000"))
-                .isInstanceOf(NotFoundException.class)
-                .hasMessage("organization name \"020f755c3c082000\" not found");
-    }
-
-    @Test
-    void updateTemplate() {
-
-        OffsetDateTime now = OffsetDateTime.now(ZoneOffset.UTC);
-
-        DocumentCreate documentCreate = createDoc();
-
-        Document template = templatesApi.createTemplate(documentCreate);
-
-        template
-                .content("changed_content")
-                .getMeta()
-                .version("2")
-                .name("changed_name.txt");
-
-        Document updated = templatesApi.updateTemplate(template);
-
-        Assertions.assertThat(updated).isNotNull();
-        Assertions.assertThat(updated.getContent()).isEqualTo("changed_content");
-        Assertions.assertThat(updated.getMeta()).isNotNull();
-        Assertions.assertThat(updated.getMeta().getVersion()).isEqualTo("2");
-        Assertions.assertThat(updated.getMeta().getName()).isEqualTo("changed_name.txt");
-        Assertions.assertThat(updated.getMeta().getUpdatedAt()).isAfter(now);
-        Assertions.assertThat(updated.getMeta().getUpdatedAt()).isAfter(updated.getMeta().getCreatedAt());
-    }
-
-    @Test
-    @Disabled("https://github.com/influxdata/influxdb/issues/17245")
-    void labels() {
-
-        LabelsApi labelsApi = influxDBClient.getLabelsApi();
-
-        Document template = templatesApi.createTemplate(createDoc());
-
-        Map<String, String> properties = new HashMap<>();
-        properties.put("color", "green");
-        properties.put("location", "west");
-
-        Label label = labelsApi.createLabel(generateName("Cool Resource"), properties, organization.getId());
-
-        List<Label> labels = templatesApi.getLabels(template);
-        Assertions.assertThat(labels).hasSize(0);
-
-        Label addedLabel = templatesApi.addLabel(label, template).getLabel();
-        Assertions.assertThat(addedLabel).isNotNull();
-        Assertions.assertThat(addedLabel.getId()).isEqualTo(label.getId());
-        Assertions.assertThat(addedLabel.getName()).isEqualTo(label.getName());
-        Assertions.assertThat(addedLabel.getProperties()).isEqualTo(label.getProperties());
-
-        labels = templatesApi.getLabels(template);
-        Assertions.assertThat(labels).hasSize(1);
-        Assertions.assertThat(labels.get(0).getId()).isEqualTo(label.getId());
-        Assertions.assertThat(labels.get(0).getName()).isEqualTo(label.getName());
-
-        templatesApi.deleteLabel(label, template);
-
-        labels = templatesApi.getLabels(template);
-        Assertions.assertThat(labels).hasSize(0);
-    }
-
-    @Test
-    void labelAddNotExists() {
-
-        Document template = templatesApi.createTemplate(createDoc());
-
-        Assertions.assertThatThrownBy(() -> templatesApi.addLabel("020f755c3c082000", template.getId()))
-                .isInstanceOf(NotFoundException.class);
-    }
-
-    @Test
-    void labelDeleteNotExists() {
-
-        Document template = templatesApi.createTemplate(createDoc());
-
-        Assertions.assertThatThrownBy(() -> templatesApi.deleteLabel("020f755c3c082000", template.getId()))
-                .isInstanceOf(NotFoundException.class);
-    }
-
-    @Test
-    @Disabled
-    //TODO https://github.com/influxdata/influxdb/issues/12968
-    void cloneTemplate() {
-
-        Document template = templatesApi.createTemplate(createDoc());
-
-        Map<String, String> properties = new HashMap<>();
-        properties.put("color", "green");
-        properties.put("location", "west");
-
-        Label label = influxDBClient.getLabelsApi().createLabel(generateName("Cool Resource"), properties, organization.getId());
-
-        templatesApi.addLabel(label, template);
-
-        Document cloned = templatesApi.cloneTemplate(generateName("cloned-template"), template.getId());
-
-        Assertions.assertThat(cloned).isNotNull();
-        Assertions.assertThat(cloned.getContent()).isEqualTo("templates content");
-        Assertions.assertThat(cloned.getMeta()).isNotNull();
-        Assertions.assertThat(cloned.getMeta().getVersion()).isEqualTo("1");
-        Assertions.assertThat(cloned.getMeta().getName()).startsWith("cloned-template");
-
-        List<Label> labels = templatesApi.getLabels(cloned);
-        Assertions.assertThat(labels).hasSize(1);
-        Assertions.assertThat(labels.get(0).getId()).isEqualTo(label.getId());
-    }
-
-    @Nonnull
-    private DocumentCreate createDoc() {
-
-        DocumentMeta meta = new DocumentMeta();
-        meta.setName(generateName("document-name"));
-        meta.setVersion("1");
-
-        DocumentCreate documentCreate = new DocumentCreate();
-        documentCreate.setMeta(meta);
-        documentCreate.setOrgID(organization.getId());
-        documentCreate.setContent("templates content");
-
-        return documentCreate;
-    }
-}
\ No newline at end of file
