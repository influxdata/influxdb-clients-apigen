diff --git a/README.md b/README.md
index a810e1681b..3a2c186cc8 100644
--- a/README.md
+++ b/README.md
@@ -264,7 +264,7 @@ public class InfluxDB2ManagementExample {
         PermissionResource resource = new PermissionResource();
         resource.setId(bucket.getId());
         resource.setOrgID("12bdc4164c2e8141");
-        resource.setType(PermissionResource.TypeEnum.BUCKETS);
+        resource.setType(PermissionResource.TYPE_BUCKETS);
 
         // Read permission
         Permission read = new Permission();
diff --git a/client-kotlin/src/test/kotlin/com/influxdb/client/kotlin/ITQueryKotlinApi.kt b/client-kotlin/src/test/kotlin/com/influxdb/client/kotlin/ITQueryKotlinApi.kt
index 0d9c0e010c..7034f526b9 100644
--- a/client-kotlin/src/test/kotlin/com/influxdb/client/kotlin/ITQueryKotlinApi.kt
+++ b/client-kotlin/src/test/kotlin/com/influxdb/client/kotlin/ITQueryKotlinApi.kt
@@ -84,7 +84,7 @@ internal class ITQueryKotlinApi : AbstractITInfluxDBClientKotlin() {
 
         val resource = PermissionResource()
         resource.orgID = organization.id
-        resource.type = PermissionResource.TypeEnum.BUCKETS
+        resource.type = PermissionResource.TYPE_BUCKETS
         resource.id = bucket.id
 
         val readBucket = Permission()
diff --git a/client-reactive/src/test/java/com/influxdb/client/reactive/ITWriteQueryReactiveApi.java b/client-reactive/src/test/java/com/influxdb/client/reactive/ITWriteQueryReactiveApi.java
index b2f3337cfa..f0633102ff 100644
--- a/client-reactive/src/test/java/com/influxdb/client/reactive/ITWriteQueryReactiveApi.java
+++ b/client-reactive/src/test/java/com/influxdb/client/reactive/ITWriteQueryReactiveApi.java
@@ -80,7 +80,7 @@ class ITWriteQueryReactiveApi extends AbstractITInfluxDBClientTest {
 
         PermissionResource resource = new PermissionResource();
         resource.setOrgID(organization.getId());
-        resource.setType(PermissionResource.TypeEnum.BUCKETS);
+        resource.setType(PermissionResource.TYPE_BUCKETS);
         resource.setId(bucket.getId());
 
         Permission readBucket = new Permission();
diff --git a/client-scala/src/test/scala/com/influxdb/client/scala/ITQueryScalaApiQuery.scala b/client-scala/src/test/scala/com/influxdb/client/scala/ITQueryScalaApiQuery.scala
index 2d61d76439..f5dfc2400a 100644
--- a/client-scala/src/test/scala/com/influxdb/client/scala/ITQueryScalaApiQuery.scala
+++ b/client-scala/src/test/scala/com/influxdb/client/scala/ITQueryScalaApiQuery.scala
@@ -73,7 +73,7 @@ class ITQueryScalaApiQuery extends AbstractITQueryScalaApi with Matchers {
 
     val resource = new PermissionResource
     resource.setOrgID(organization.getId)
-    resource.setType(PermissionResource.TypeEnum.BUCKETS)
+    resource.setType(PermissionResource.TYPE_BUCKETS)
     resource.setId(bucket.getId)
 
     val readBucket = new Permission
diff --git a/client/README.md b/client/README.md
index 7523728984..d2f4ec03ab 100644
--- a/client/README.md
+++ b/client/README.md
@@ -835,7 +835,7 @@ public class InfluxDB2ManagementExample {
         PermissionResource resource = new PermissionResource();
         resource.setId(bucket.getId());
         resource.setOrgID("12bdc4164c2e8141");
-        resource.setType(PermissionResource.TypeEnum.BUCKETS);
+        resource.setType(PermissionResource.TYPE_BUCKETS);
 
         // Read permission
         Permission read = new Permission();
diff --git a/client/src/generated/java/com/influxdb/client/domain/PermissionResource.java b/client/src/generated/java/com/influxdb/client/domain/PermissionResource.java
index 9c4770474c..1a915ec83a 100644
--- a/client/src/generated/java/com/influxdb/client/domain/PermissionResource.java
+++ b/client/src/generated/java/com/influxdb/client/domain/PermissionResource.java
@@ -1,5 +1,5 @@
 /*
- * Influx OSS API Service
+ * InfluxDB OSS API Service
  * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
  *
  * OpenAPI spec version: 2.0.0
@@ -29,100 +29,34 @@ import java.io.IOException;
  */
 
 public class PermissionResource {
-  /**
-   * Gets or Sets type
-   */
-  @JsonAdapter(TypeEnum.Adapter.class)
-  public enum TypeEnum {
-    AUTHORIZATIONS("authorizations"),
-    
-    BUCKETS("buckets"),
-    
-    DASHBOARDS("dashboards"),
-    
-    ORGS("orgs"),
-    
-    SOURCES("sources"),
-    
-    TASKS("tasks"),
-    
-    TELEGRAFS("telegrafs"),
-    
-    USERS("users"),
-    
-    VARIABLES("variables"),
-    
-    SCRAPERS("scrapers"),
-    
-    SECRETS("secrets"),
-    
-    LABELS("labels"),
-    
-    VIEWS("views"),
-    
-    DOCUMENTS("documents"),
-    
-    NOTIFICATIONRULES("notificationRules"),
-    
-    NOTIFICATIONENDPOINTS("notificationEndpoints"),
-    
-    CHECKS("checks"),
-    
-    DBRP("dbrp"),
-    
-    NOTEBOOKS("notebooks"),
-    
-    ANNOTATIONS("annotations"),
-    
-    REMOTES("remotes"),
-    
-    REPLICATIONS("replications"),
-    
-    FLOWS("flows"),
-    
-    FUNCTIONS("functions");
-
-    private String value;
-
-    TypeEnum(String value) {
-      this.value = value;
-    }
-
-    public String getValue() {
-      return value;
-    }
-
-    @Override
-    public String toString() {
-      return String.valueOf(value);
-    }
-
-    public static TypeEnum fromValue(String text) {
-      for (TypeEnum b : TypeEnum.values()) {
-        if (String.valueOf(b.value).equals(text)) {
-          return b;
-        }
-      }
-      return null;
-    }
-
-    public static class Adapter extends TypeAdapter<TypeEnum> {
-      @Override
-      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
-        jsonWriter.value(enumeration.getValue());
-      }
-
-      @Override
-      public TypeEnum read(final JsonReader jsonReader) throws IOException {
-        String value = jsonReader.nextString();
-        return TypeEnum.fromValue(String.valueOf(value));
-      }
-    }
-  }
-
+  // Possible values for type property:
+  public static String TYPE_AUTHORIZATIONS = "authorizations";
+  public static String TYPE_BUCKETS = "buckets";
+  public static String TYPE_DASHBOARDS = "dashboards";
+  public static String TYPE_ORGS = "orgs";
+  public static String TYPE_SOURCES = "sources";
+  public static String TYPE_TASKS = "tasks";
+  public static String TYPE_TELEGRAFS = "telegrafs";
+  public static String TYPE_USERS = "users";
+  public static String TYPE_VARIABLES = "variables";
+  public static String TYPE_SCRAPERS = "scrapers";
+  public static String TYPE_SECRETS = "secrets";
+  public static String TYPE_LABELS = "labels";
+  public static String TYPE_VIEWS = "views";
+  public static String TYPE_DOCUMENTS = "documents";
+  public static String TYPE_NOTIFICATIONRULES = "notificationRules";
+  public static String TYPE_NOTIFICATIONENDPOINTS = "notificationEndpoints";
+  public static String TYPE_CHECKS = "checks";
+  public static String TYPE_DBRP = "dbrp";
+  public static String TYPE_NOTEBOOKS = "notebooks";
+  public static String TYPE_ANNOTATIONS = "annotations";
+  public static String TYPE_REMOTES = "remotes";
+  public static String TYPE_REPLICATIONS = "replications";
+  public static String TYPE_FLOWS = "flows";
+  public static String TYPE_FUNCTIONS = "functions";
   public static final String SERIALIZED_NAME_TYPE = "type";
   @SerializedName(SERIALIZED_NAME_TYPE)
-  private TypeEnum type;
+  private String type;
 
   public static final String SERIALIZED_NAME_ID = "id";
   @SerializedName(SERIALIZED_NAME_ID)
@@ -140,7 +74,7 @@ public class PermissionResource {
   @SerializedName(SERIALIZED_NAME_ORG)
   private String org;
 
-  public PermissionResource type(TypeEnum type) {
+  public PermissionResource type(String type) {
     this.type = type;
     return this;
   }
@@ -150,11 +84,11 @@ public class PermissionResource {
    * @return type
   **/
   @ApiModelProperty(required = true, value = "")
-  public TypeEnum getType() {
+  public String getType() {
     return type;
   }
 
-  public void setType(TypeEnum type) {
+  public void setType(String type) {
     this.type = type;
   }
 
diff --git a/client/src/main/java/com/influxdb/client/TelegrafsApi.java b/client/src/main/java/com/influxdb/client/TelegrafsApi.java
index fd886a48e0..836d2d5721 100644
--- a/client/src/main/java/com/influxdb/client/TelegrafsApi.java
+++ b/client/src/main/java/com/influxdb/client/TelegrafsApi.java
@@ -36,7 +36,7 @@ import com.influxdb.client.domain.ResourceMember;
 import com.influxdb.client.domain.ResourceOwner;
 import com.influxdb.client.domain.Telegraf;
 import com.influxdb.client.domain.TelegrafPlugin;
-import com.influxdb.client.domain.TelegrafRequest;
+import com.influxdb.client.domain.TelegrafPluginRequest;
 import com.influxdb.client.domain.TelegrafRequestMetadata;
 import com.influxdb.client.domain.User;
 
@@ -48,7 +48,7 @@ import com.influxdb.client.domain.User;
  * The following example shows how to create a Telegraf configuration with an output plugin and an input cpu plugin.
  * <pre>
  * TelegrafPlugin output = new TelegrafPlugin()
- *                 .type(TelegrafPlugin.TypeEnum.OUTPUTS)
+ *                 .type(TelegrafPlugin.TypeEnum.OUTPUT)
  *                 .name("influxdb_v2")
  *                 .description("my instance")
  *                 .putConfigItem("organization", "my-org")
@@ -57,7 +57,7 @@ import com.influxdb.client.domain.User;
  *                 .putConfigItem("urls", Collections.singletonList("http://127.0.0.1:9999"));
  *
  * TelegrafPlugin cpu = new TelegrafPlugin()
- *                 .type(TelegrafPlugin.TypeEnum.INPUTS)
+ *                 .type(TelegrafPlugin.TypeEnum.INPUT)
  *                 .name("cpu")
  *                 .putConfigItem("percpu", true)
  *                 .putConfigItem("totalcpu", true)
@@ -174,11 +174,11 @@ public interface TelegrafsApi {
     /**
      * Create a telegraf config.
      *
-     * @param telegrafRequest Telegraf Configuration to create
+     * @param telegrafPluginRequest Telegraf Configuration to create
      * @return Telegraf config created
      */
     @Nonnull
-    Telegraf createTelegraf(@Nonnull final TelegrafRequest telegrafRequest);
+    Telegraf createTelegraf(@Nonnull final TelegrafPluginRequest telegrafPluginRequest);
 
     /**
      * Created default Telegraf Agent configuration.
@@ -217,7 +217,7 @@ public interface TelegrafsApi {
      */
     @Nonnull
     Telegraf updateTelegraf(@Nonnull final String telegrafID,
-                            @Nonnull final TelegrafRequest telegrafRequest);
+                            @Nonnull final TelegrafPluginRequest telegrafRequest);
 
     /**
      * Delete a telegraf config.
diff --git a/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java b/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java
index e171a4a62e..c42e31455a 100644
--- a/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java
+++ b/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java
@@ -28,8 +28,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
@@ -46,7 +44,8 @@ import com.influxdb.client.domain.ResourceOwner;
 import com.influxdb.client.domain.ResourceOwners;
 import com.influxdb.client.domain.Telegraf;
 import com.influxdb.client.domain.TelegrafPlugin;
-import com.influxdb.client.domain.TelegrafRequest;
+import com.influxdb.client.domain.TelegrafPluginRequest;
+import com.influxdb.client.domain.TelegrafPluginRequestPlugins;
 import com.influxdb.client.domain.TelegrafRequestMetadata;
 import com.influxdb.client.domain.Telegrafs;
 import com.influxdb.client.domain.User;
@@ -123,25 +122,21 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
         // append agent configuration
         config.append("[agent]").append("\n");
-        agentConfiguration.forEach((key, value) -> appendConfiguration(config, key, value));
 
-        config.append("\n");
-
-        // append plugins configuration
-        for (TelegrafPlugin plugin : plugins) {
-            if (plugin.getDescription() != null) {
-                config.append("#").append(plugin.getDescription()).append("\n");
-            }
-            config.append("[[").append(plugin.getType()).append(".").append(plugin.getName()).append("]]").append("\n");
-            plugin.getConfig().forEach((key, value) -> appendConfiguration(config, key, value));
-        }
-
-        TelegrafRequest telegrafRequest = new TelegrafRequest()
+        TelegrafPluginRequest telegrafRequest = new TelegrafPluginRequest()
                 .name(name)
                 .description(description)
                 .orgID(orgID)
                 .config(config.toString());
 
+        for (TelegrafPlugin plugin : plugins) {
+            telegrafRequest.addPluginsItem(new TelegrafPluginRequestPlugins()
+                    .description(plugin.getDescription())
+                    .type(plugin.getType().getValue())
+                    .name(plugin.getName())
+                    .config(plugin.getConfig()));
+        }
+
         return createTelegraf(telegrafRequest);
     }
 
@@ -157,7 +152,7 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
         Arguments.checkNonEmpty(orgID, "orgID");
         Arguments.checkNonEmpty(config, "config");
 
-        TelegrafRequest telegrafRequest = new TelegrafRequest()
+        TelegrafPluginRequest telegrafRequest = new TelegrafPluginRequest()
                 .name(name)
                 .description(description)
                 .orgID(orgID)
@@ -184,11 +179,11 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
     @Nonnull
     @Override
-    public Telegraf createTelegraf(@Nonnull final TelegrafRequest telegrafRequest) {
+    public Telegraf createTelegraf(@Nonnull final TelegrafPluginRequest telegrafPluginRequest) {
 
-        Arguments.checkNotNull(telegrafRequest, "telegrafRequest");
+        Arguments.checkNotNull(telegrafPluginRequest, "telegrafPluginRequest");
 
-        Call<Telegraf> call = service.postTelegrafs(telegrafRequest, null);
+        Call<Telegraf> call = service.postTelegrafs(telegrafPluginRequest, null);
 
         return execute(call);
     }
@@ -215,7 +210,7 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
         Arguments.checkNotNull(telegraf, "TelegrafConfig");
 
-        TelegrafRequest telegrafRequest = toTelegrafRequest(telegraf);
+        TelegrafPluginRequest telegrafRequest = toTelegrafRequest(telegraf);
 
         return updateTelegraf(telegraf.getId(), telegrafRequest);
     }
@@ -223,12 +218,10 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
     @Nonnull
     @Override
     public Telegraf updateTelegraf(@Nonnull final String telegrafID,
-                                   @Nonnull final TelegrafRequest telegrafRequest) {
-
-        Arguments.checkNotNull(telegrafRequest, "TelegrafRequest");
-
+                                   @Nonnull final TelegrafPluginRequest telegrafPluginRequest) {
+        Arguments.checkNotNull(telegrafPluginRequest, "TelegrafPluginRequest");
 
-        Call<Telegraf> telegrafConfigCall = service.putTelegrafsID(telegrafID, telegrafRequest, null);
+        Call<Telegraf> telegrafConfigCall = service.putTelegrafsID(telegrafID, telegrafPluginRequest, null);
 
         return execute(telegrafConfigCall);
     }
@@ -272,7 +265,7 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
         Arguments.checkNotNull(telegraf, "TelegrafConfig");
 
 
-        TelegrafRequest telegrafRequest = toTelegrafRequest(telegraf);
+        TelegrafPluginRequest telegrafRequest = toTelegrafRequest(telegraf);
 
         Telegraf created = createTelegraf(telegrafRequest);
         created.setName(clonedName);
@@ -538,11 +531,11 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
     }
 
     @Nonnull
-    private TelegrafRequest toTelegrafRequest(@Nonnull final Telegraf telegraf) {
+    private TelegrafPluginRequest toTelegrafRequest(@Nonnull final Telegraf telegraf) {
 
         Arguments.checkNotNull(telegraf, "telegraf");
 
-        TelegrafRequest telegrafRequest = new TelegrafRequest();
+        TelegrafPluginRequest telegrafRequest = new TelegrafPluginRequest();
         telegrafRequest.setName(telegraf.getName());
         telegrafRequest.setDescription(telegraf.getDescription());
         telegrafRequest.setConfig(telegraf.getConfig());
@@ -551,31 +544,4 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
         return telegrafRequest;
     }
-
-    private void appendConfiguration(@Nonnull final StringBuilder config,
-                                     @Nonnull final String key,
-                                     @Nullable final Object value) {
-        if (value != null) {
-            config.append("  ").append(key).append(" = ");
-            if (value instanceof Collection) {
-                Stream<String> values = ((Collection<Object>) value).stream()
-                        .map(it -> {
-                            if (it instanceof  String) {
-                                return "\"" + it.toString() + "\"";
-                            }
-                            return it.toString();
-                        });
-                config.append("[");
-                config.append(values.collect(Collectors.joining(", ")));
-                config.append("]");
-            } else if (value instanceof String) {
-                config.append('"');
-                config.append(value.toString());
-                config.append('"');
-            } else {
-                config.append(value.toString());
-            }
-            config.append("\n");
-        }
-    }
 }
\ No newline at end of file
diff --git a/client/src/test/java/com/influxdb/client/AbstractITWrite.java b/client/src/test/java/com/influxdb/client/AbstractITWrite.java
index 554fb22ba4..9f40028498 100644
--- a/client/src/test/java/com/influxdb/client/AbstractITWrite.java
+++ b/client/src/test/java/com/influxdb/client/AbstractITWrite.java
@@ -52,7 +52,7 @@ abstract class AbstractITWrite extends AbstractITClientTest {
         PermissionResource resource = new PermissionResource();
         resource.setId(bucket.getId());
         resource.setOrgID(organization.getId());
-        resource.setType(PermissionResource.TypeEnum.BUCKETS);
+        resource.setType(PermissionResource.TYPE_BUCKETS);
 
         //
         // Add Permissions to read and write to the Bucket
diff --git a/client/src/test/java/com/influxdb/client/ITAuthorizationsApi.java b/client/src/test/java/com/influxdb/client/ITAuthorizationsApi.java
index 3f4038dbfc..779869e0d4 100644
--- a/client/src/test/java/com/influxdb/client/ITAuthorizationsApi.java
+++ b/client/src/test/java/com/influxdb/client/ITAuthorizationsApi.java
@@ -68,7 +68,7 @@ class ITAuthorizationsApi extends AbstractITClientTest {
 
         PermissionResource userResource = new PermissionResource();
         userResource.setOrgID(organization.getId());
-        userResource.setType(PermissionResource.TypeEnum.USERS);
+        userResource.setType(PermissionResource.TYPE_USERS);
 
         Permission readUsers = new Permission();
         readUsers.setAction(Permission.ActionEnum.READ);
@@ -76,7 +76,7 @@ class ITAuthorizationsApi extends AbstractITClientTest {
 
         PermissionResource orgResource = new PermissionResource();
         orgResource.setOrgID(organization.getId());
-        orgResource.setType(PermissionResource.TypeEnum.ORGS);
+        orgResource.setType(PermissionResource.TYPE_ORGS);
 
         Permission writeOrganizations = new Permission();
         writeOrganizations.setAction(Permission.ActionEnum.WRITE);
@@ -100,11 +100,11 @@ class ITAuthorizationsApi extends AbstractITClientTest {
         Assertions.assertThat(authorization.getStatus()).isEqualTo(Authorization.StatusEnum.ACTIVE);
 
         Assertions.assertThat(authorization.getPermissions()).hasSize(2);
-        Assertions.assertThat(authorization.getPermissions().get(0).getResource().getType()).isEqualTo(PermissionResource.TypeEnum.USERS);
+        Assertions.assertThat(authorization.getPermissions().get(0).getResource().getType()).isEqualTo(PermissionResource.TYPE_USERS);
         Assertions.assertThat(authorization.getPermissions().get(0).getResource().getOrgID()).isEqualTo(organization.getId());
         Assertions.assertThat(authorization.getPermissions().get(0).getAction()).isEqualTo(Permission.ActionEnum.READ);
 
-        Assertions.assertThat(authorization.getPermissions().get(1).getResource().getType()).isEqualTo(PermissionResource.TypeEnum.ORGS);
+        Assertions.assertThat(authorization.getPermissions().get(1).getResource().getType()).isEqualTo(PermissionResource.TYPE_ORGS);
         Assertions.assertThat(authorization.getPermissions().get(1).getResource().getOrgID()).isEqualTo(organization.getId());
         Assertions.assertThat(authorization.getPermissions().get(1).getAction()).isEqualTo(Permission.ActionEnum.WRITE);
 
@@ -118,7 +118,7 @@ class ITAuthorizationsApi extends AbstractITClientTest {
 
         PermissionResource resource = new PermissionResource();
         resource.setOrgID(organization.getId());
-        resource.setType(PermissionResource.TypeEnum.SOURCES);
+        resource.setType(PermissionResource.TYPE_SOURCES);
 
         Permission createSource = new Permission();
         createSource.setResource(resource);
@@ -144,7 +144,7 @@ class ITAuthorizationsApi extends AbstractITClientTest {
 
         PermissionResource resource = new PermissionResource();
         resource.setOrgID(organization.getId());
-        resource.setType(PermissionResource.TypeEnum.TASKS);
+        resource.setType(PermissionResource.TYPE_TASKS);
 
         Permission createTask = new Permission();
         createTask.setResource(resource);
@@ -161,10 +161,10 @@ class ITAuthorizationsApi extends AbstractITClientTest {
         Authorization authorization = authorizationsApi.createAuthorization(organization, permissions);
 
         Assertions.assertThat(authorization.getPermissions()).hasSize(2);
-        Assertions.assertThat(authorization.getPermissions().get(0).getResource().getType()).isEqualTo(PermissionResource.TypeEnum.TASKS);
+        Assertions.assertThat(authorization.getPermissions().get(0).getResource().getType()).isEqualTo(PermissionResource.TYPE_TASKS);
         Assertions.assertThat(authorization.getPermissions().get(0).getResource().getOrgID()).isEqualTo(organization.getId());
         Assertions.assertThat(authorization.getPermissions().get(0).getAction()).isEqualTo(Permission.ActionEnum.READ);
-        Assertions.assertThat(authorization.getPermissions().get(1).getResource().getType()).isEqualTo(PermissionResource.TypeEnum.TASKS);
+        Assertions.assertThat(authorization.getPermissions().get(1).getResource().getType()).isEqualTo(PermissionResource.TYPE_TASKS);
         Assertions.assertThat(authorization.getPermissions().get(1).getResource().getOrgID()).isEqualTo(organization.getId());
         Assertions.assertThat(authorization.getPermissions().get(1).getAction()).isEqualTo(Permission.ActionEnum.WRITE);
     }
@@ -177,7 +177,7 @@ class ITAuthorizationsApi extends AbstractITClientTest {
 
         PermissionResource resource = new PermissionResource();
         resource.setOrgID(organization.getId());
-        resource.setType(PermissionResource.TypeEnum.BUCKETS);
+        resource.setType(PermissionResource.TYPE_BUCKETS);
         resource.setId(bucket.getId());
 
         Permission readBucket = new Permission();
@@ -196,10 +196,10 @@ class ITAuthorizationsApi extends AbstractITClientTest {
 
         Assertions.assertThat(authorization.getPermissions()).hasSize(2);
         Assertions.assertThat(authorization.getPermissions().get(0).getResource().getId()).isEqualTo(bucket.getId());
-        Assertions.assertThat(authorization.getPermissions().get(0).getResource().getType()).isEqualTo(PermissionResource.TypeEnum.BUCKETS);
+        Assertions.assertThat(authorization.getPermissions().get(0).getResource().getType()).isEqualTo(PermissionResource.TYPE_BUCKETS);
         Assertions.assertThat(authorization.getPermissions().get(0).getAction()).isEqualTo(Permission.ActionEnum.READ);
         Assertions.assertThat(authorization.getPermissions().get(1).getResource().getId()).isEqualTo(bucket.getId());
-        Assertions.assertThat(authorization.getPermissions().get(1).getResource().getType()).isEqualTo(PermissionResource.TypeEnum.BUCKETS);
+        Assertions.assertThat(authorization.getPermissions().get(1).getResource().getType()).isEqualTo(PermissionResource.TYPE_BUCKETS);
         Assertions.assertThat(authorization.getPermissions().get(1).getAction()).isEqualTo(Permission.ActionEnum.WRITE);
     }
 
@@ -283,7 +283,7 @@ class ITAuthorizationsApi extends AbstractITClientTest {
 
         PermissionResource resource = new PermissionResource();
         resource.setOrgID(organization.getId());
-        resource.setType(PermissionResource.TypeEnum.USERS);
+        resource.setType(PermissionResource.TYPE_USERS);
 
         Permission readUsers = new Permission();
         readUsers.setAction(Permission.ActionEnum.READ);
@@ -341,7 +341,7 @@ class ITAuthorizationsApi extends AbstractITClientTest {
         Assertions.assertThat(cloned.getDescription()).isEqualTo(source.getDescription());
         Assertions.assertThat(cloned.getPermissions()).hasSize(1);
         Assertions.assertThat(cloned.getPermissions().get(0).getAction()).isEqualTo(Permission.ActionEnum.READ);
-        Assertions.assertThat(cloned.getPermissions().get(0).getResource().getType()).isEqualTo(PermissionResource.TypeEnum.USERS);
+        Assertions.assertThat(cloned.getPermissions().get(0).getResource().getType()).isEqualTo(PermissionResource.TYPE_USERS);
         Assertions.assertThat(cloned.getPermissions().get(0).getResource().getOrgID()).isEqualTo(organization.getId());
     }
 
@@ -358,7 +358,7 @@ class ITAuthorizationsApi extends AbstractITClientTest {
 
         PermissionResource resource = new PermissionResource();
         resource.setOrgID(organization.getId());
-        resource.setType(PermissionResource.TypeEnum.USERS);
+        resource.setType(PermissionResource.TYPE_USERS);
 
         Permission permission = new Permission();
         permission.setAction(Permission.ActionEnum.READ);
diff --git a/client/src/test/java/com/influxdb/client/ITDeleteApi.java b/client/src/test/java/com/influxdb/client/ITDeleteApi.java
index b9fe2470c0..e813812046 100644
--- a/client/src/test/java/com/influxdb/client/ITDeleteApi.java
+++ b/client/src/test/java/com/influxdb/client/ITDeleteApi.java
@@ -67,7 +67,7 @@ class ITDeleteApi extends AbstractITClientTest {
         PermissionResource resource = new PermissionResource();
         resource.setId(bucket.getId());
         resource.setOrgID(organization.getId());
-        resource.setType(PermissionResource.TypeEnum.BUCKETS);
+        resource.setType(PermissionResource.TYPE_BUCKETS);
 
         //
         // Add Permissions to read and write to the Bucket
diff --git a/client/src/test/java/com/influxdb/client/ITTasksApi.java b/client/src/test/java/com/influxdb/client/ITTasksApi.java
index a2b1a8f69b..1c930fd21e 100644
--- a/client/src/test/java/com/influxdb/client/ITTasksApi.java
+++ b/client/src/test/java/com/influxdb/client/ITTasksApi.java
@@ -731,7 +731,7 @@ class ITTasksApi extends AbstractITClientTest {
 
         PermissionResource resource = new PermissionResource();
         resource.setOrgID(organization.getId());
-        resource.setType(PermissionResource.TypeEnum.TASKS);
+        resource.setType(PermissionResource.TYPE_TASKS);
 
         Permission createTask = new Permission();
         createTask.setResource(resource);
@@ -742,7 +742,7 @@ class ITTasksApi extends AbstractITClientTest {
         deleteTask.setAction(Permission.ActionEnum.WRITE);
 
         PermissionResource orgResource = new PermissionResource();
-        orgResource.setType(PermissionResource.TypeEnum.ORGS);
+        orgResource.setType(PermissionResource.TYPE_ORGS);
 
         Permission createOrg = new Permission();
         createOrg.setAction(Permission.ActionEnum.WRITE);
@@ -753,14 +753,14 @@ class ITTasksApi extends AbstractITClientTest {
         readOrg.setResource(orgResource);
 
         PermissionResource userResource = new PermissionResource();
-        userResource.setType(PermissionResource.TypeEnum.USERS);
+        userResource.setType(PermissionResource.TYPE_USERS);
 
         Permission createUsers = new Permission();
         createUsers.setAction(Permission.ActionEnum.WRITE);
         createUsers.setResource(userResource);
 
         PermissionResource labelResource = new PermissionResource();
-        labelResource.setType(PermissionResource.TypeEnum.LABELS);
+        labelResource.setType(PermissionResource.TYPE_LABELS);
 
         Permission createLabels = new Permission();
         createLabels.setAction(Permission.ActionEnum.WRITE);
@@ -771,7 +771,7 @@ class ITTasksApi extends AbstractITClientTest {
         readLabels.setResource(labelResource);
 
         PermissionResource authResource = new PermissionResource();
-        authResource.setType(PermissionResource.TypeEnum.AUTHORIZATIONS);
+        authResource.setType(PermissionResource.TYPE_AUTHORIZATIONS);
 
         Permission createAuth = new Permission();
         createAuth.setAction(Permission.ActionEnum.WRITE);
@@ -782,7 +782,7 @@ class ITTasksApi extends AbstractITClientTest {
 
         PermissionResource bucketResource = new PermissionResource();
         bucketResource.setOrgID(organization.getId());
-        bucketResource.setType(PermissionResource.TypeEnum.BUCKETS);
+        bucketResource.setType(PermissionResource.TYPE_BUCKETS);
         bucketResource.setId(bucket.getId());
 
         Permission readBucket = new Permission();
diff --git a/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java b/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java
index 24239705fe..64b71bf80e 100644
--- a/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java
+++ b/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java
@@ -34,6 +34,7 @@ import com.influxdb.client.domain.ResourceMember;
 import com.influxdb.client.domain.ResourceOwner;
 import com.influxdb.client.domain.Telegraf;
 import com.influxdb.client.domain.TelegrafPlugin;
+import com.influxdb.client.domain.TelegrafPluginRequest;
 import com.influxdb.client.domain.User;
 import com.influxdb.exceptions.NotFoundException;
 
@@ -113,28 +114,6 @@ class ITTelegrafsApi extends AbstractITClientTest {
         Assertions.assertThat(inputs.get(0)).hasEntrySatisfying("percpu", value -> Assertions.assertThat(value).isEqualTo(true));
     }
 
-    @Test
-    void createTelegrafWithCustomPlugin() {
-
-        String name = generateName("TelegrafConfig");
-
-        TelegrafPlugin custom = new TelegrafPlugin().type(TelegrafPlugin.TypeEnum.INPUTS).name("custom")
-                .putConfigItem("bin", "/sbin/ping")
-                .putConfigItem("count", 10)
-                .putConfigItem("host", "8.8.8.8");
-
-        Telegraf telegrafConfig = telegrafsApi
-                .createTelegraf(name, "test-config", organization.getId(), Collections.singletonList(custom));
-
-        Toml toml = new Toml().read(telegrafConfig.getConfig());
-
-        List<HashMap<String, Object>> inputs = toml.getList("inputs.custom");
-        Assertions.assertThat(inputs.get(0))
-                .hasEntrySatisfying("bin", value -> Assertions.assertThat(value).isEqualTo("/sbin/ping"))
-                .hasEntrySatisfying("count", value -> Assertions.assertThat(value).isEqualTo(10L))
-                .hasEntrySatisfying("host", value -> Assertions.assertThat(value).isEqualTo("8.8.8.8"));
-    }
-
     @Test
     void pluginWithoutConfiguration() {
 
@@ -155,10 +134,15 @@ class ITTelegrafsApi extends AbstractITClientTest {
         telegrafConfig.setDescription("updated");
         telegrafConfig.setConfig("my-updated-config");
 
-        telegrafConfig = telegrafsApi.updateTelegraf(telegrafConfig);
+        TelegrafPluginRequest updated = new TelegrafPluginRequest()
+                .name(telegrafConfig.getName())
+                .description("updated")
+                .metadata(telegrafConfig.getMetadata())
+                .orgID(telegrafConfig.getOrgID());
+
+        telegrafConfig = telegrafsApi.updateTelegraf(telegrafConfig.getId(), updated);
 
         Assertions.assertThat(telegrafConfig.getDescription()).isEqualTo("updated");
-        Assertions.assertThat(telegrafConfig.getConfig()).isEqualTo("my-updated-config");
     }
 
     @Test
@@ -403,8 +387,6 @@ class ITTelegrafsApi extends AbstractITClientTest {
         Assertions.assertThat(cloned.getName()).isEqualTo(name);
         Assertions.assertThat(cloned.getOrgID()).isEqualTo(organization.getId());
         Assertions.assertThat(cloned.getDescription()).isEqualTo(source.getDescription());
-        Assertions.assertThat(cloned.getConfig()).isEqualTo(source.getConfig());
-        Assertions.assertThat(cloned.getMetadata().getBuckets()).isEqualTo(source.getMetadata().getBuckets());
 
         List<Label> labels = telegrafsApi.getLabels(cloned);
         Assertions.assertThat(labels).hasSize(1);
@@ -421,25 +403,24 @@ class ITTelegrafsApi extends AbstractITClientTest {
     @Nonnull
     private TelegrafPlugin newCpuPlugin() {
         return new TelegrafPlugin()
-                .type(TelegrafPlugin.TypeEnum.INPUTS)
+                .type(TelegrafPlugin.TypeEnum.INPUT)
                 .name("cpu")
                 .putConfigItem("percpu", true)
                 .putConfigItem("totalcpu", true)
                 .putConfigItem("collect_cpu_time", false)
-                .putConfigItem("report_active", false)
-                .putConfigItem("avoid_null", null);
+                .putConfigItem("report_active", false);
     }
 
     @Nonnull
     private TelegrafPlugin newKernelPlugin() {
-        return new TelegrafPlugin().type(TelegrafPlugin.TypeEnum.INPUTS).name("kernel");
+        return new TelegrafPlugin().type(TelegrafPlugin.TypeEnum.INPUT).name("kernel");
     }
 
     @Nonnull
     private TelegrafPlugin newOutputPlugin() {
 
         return new TelegrafPlugin()
-                .type(TelegrafPlugin.TypeEnum.OUTPUTS)
+                .type(TelegrafPlugin.TypeEnum.OUTPUT)
                 .name("influxdb_v2")
                 .description("my instance")
                 .putConfigItem("organization", "my-org")
diff --git a/client/src/test/java/com/influxdb/client/ITWriteQueryApi.java b/client/src/test/java/com/influxdb/client/ITWriteQueryApi.java
index 1bef8d0732..c05d04680e 100644
--- a/client/src/test/java/com/influxdb/client/ITWriteQueryApi.java
+++ b/client/src/test/java/com/influxdb/client/ITWriteQueryApi.java
@@ -78,7 +78,7 @@ class ITWriteQueryApi extends AbstractITClientTest {
         PermissionResource resource = new PermissionResource();
         resource.setId(bucket.getId());
         resource.setOrgID(organization.getId());
-        resource.setType(PermissionResource.TypeEnum.BUCKETS);
+        resource.setType(PermissionResource.TYPE_BUCKETS);
 
         //
         // Add Permissions to read and write to the Bucket
@@ -409,7 +409,7 @@ class ITWriteQueryApi extends AbstractITClientTest {
         PermissionResource bucketResource = new PermissionResource();
         bucketResource.setId(bucket.getId());
         bucketResource.setOrgID(organization.getId());
-        bucketResource.setType(PermissionResource.TypeEnum.BUCKETS);
+        bucketResource.setType(PermissionResource.TYPE_BUCKETS);
 
         Permission readBucket = new Permission();
         readBucket.setResource(bucketResource);
@@ -422,7 +422,7 @@ class ITWriteQueryApi extends AbstractITClientTest {
         PermissionResource orgResource = new PermissionResource();
         orgResource.setId(organization.getId());
         orgResource.setOrgID(organization.getId());
-        orgResource.setType(PermissionResource.TypeEnum.ORGS);
+        orgResource.setType(PermissionResource.TYPE_ORGS);
 
         Permission readOrganization = new Permission();
         readOrganization.setResource(orgResource);
diff --git a/examples/src/main/java/example/InfluxDB2ManagementExample.java b/examples/src/main/java/example/InfluxDB2ManagementExample.java
index b343261d80..7c5c611581 100644
--- a/examples/src/main/java/example/InfluxDB2ManagementExample.java
+++ b/examples/src/main/java/example/InfluxDB2ManagementExample.java
@@ -53,7 +53,7 @@ public class InfluxDB2ManagementExample {
         PermissionResource resource = new PermissionResource();
         resource.setId(bucket.getId());
         resource.setOrgID("12bdc4164c2e8141");
-        resource.setType(PermissionResource.TypeEnum.BUCKETS);
+        resource.setType(PermissionResource.TYPE_BUCKETS);
 
         // Read permission
         Permission read = new Permission();
diff --git a/examples/src/main/java/example/PlatformExample.java b/examples/src/main/java/example/PlatformExample.java
index 1759b0f25e..ae5bd67733 100644
--- a/examples/src/main/java/example/PlatformExample.java
+++ b/examples/src/main/java/example/PlatformExample.java
@@ -92,7 +92,7 @@ public class PlatformExample {
         PermissionResource resource = new PermissionResource();
         resource.setId(temperatureBucket.getId());
         resource.setOrgID(medicalGMBH.getId());
-        resource.setType(PermissionResource.TypeEnum.BUCKETS);
+        resource.setType(PermissionResource.TYPE_BUCKETS);
 
         Permission readBucket = new Permission();
         readBucket.setResource(resource);
@@ -180,7 +180,7 @@ public class PlatformExample {
                 .filter(authorization -> authorization.getPermissions().stream()
                         .map(Permission::getResource)
                         .anyMatch(resource ->
-                                resource.getType().equals(PermissionResource.TypeEnum.ORGS) &&
+                                resource.getType().equals(PermissionResource.TYPE_ORGS) &&
                                         resource.getId() == null &&
                                         resource.getOrgID() == null))
                 .findFirst()
