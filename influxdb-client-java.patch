diff --git a/client-test/src/main/java/com/influxdb/test/AbstractTest.java b/client-test/src/main/java/com/influxdb/test/AbstractTest.java
index 237824cb36..3acd474f26 100644
--- a/client-test/src/main/java/com/influxdb/test/AbstractTest.java
+++ b/client-test/src/main/java/com/influxdb/test/AbstractTest.java
@@ -21,6 +21,15 @@
  */
 package com.influxdb.test;
 
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+import org.assertj.core.api.Assertions;
+import org.junit.jupiter.api.BeforeEach;
+
+import javax.annotation.Nonnull;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
@@ -29,15 +38,6 @@ import java.util.concurrent.TimeUnit;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
-import javax.annotation.Nonnull;
-
-import okhttp3.MediaType;
-import okhttp3.OkHttpClient;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.Response;
-import org.assertj.core.api.Assertions;
-import org.junit.jupiter.api.BeforeEach;
 
 /**
  * @author Jakub Bednar (bednar@github) (03/10/2018 14:54)
@@ -88,7 +88,7 @@ public abstract class AbstractTest {
 
     @Nonnull
     protected String getInfluxDb2Port() {
-        return System.getenv().getOrDefault("INFLUXDB_2_PORT_API", "9999");
+        return System.getenv().getOrDefault("INFLUXDB_2_PORT_API", "8086");
     }
 
     @Nonnull
diff --git a/client/src/main/java/com/influxdb/client/TelegrafsApi.java b/client/src/main/java/com/influxdb/client/TelegrafsApi.java
index fd886a48e0..32c5c27f54 100644
--- a/client/src/main/java/com/influxdb/client/TelegrafsApi.java
+++ b/client/src/main/java/com/influxdb/client/TelegrafsApi.java
@@ -21,14 +21,6 @@
  */
 package com.influxdb.client;
 
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import javax.annotation.concurrent.ThreadSafe;
-
 import com.influxdb.client.domain.Label;
 import com.influxdb.client.domain.LabelResponse;
 import com.influxdb.client.domain.Organization;
@@ -36,10 +28,19 @@ import com.influxdb.client.domain.ResourceMember;
 import com.influxdb.client.domain.ResourceOwner;
 import com.influxdb.client.domain.Telegraf;
 import com.influxdb.client.domain.TelegrafPlugin;
+import com.influxdb.client.domain.TelegrafPluginRequest;
 import com.influxdb.client.domain.TelegrafRequest;
 import com.influxdb.client.domain.TelegrafRequestMetadata;
 import com.influxdb.client.domain.User;
 
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import javax.annotation.concurrent.ThreadSafe;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 /**
  * The client of the InfluxDB 2.0 that implement Telegrafs HTTP API endpoint.
  * <br>
@@ -174,11 +175,11 @@ public interface TelegrafsApi {
     /**
      * Create a telegraf config.
      *
-     * @param telegrafRequest Telegraf Configuration to create
+     * @param telegrafPluginRequest Telegraf Configuration to create
      * @return Telegraf config created
      */
     @Nonnull
-    Telegraf createTelegraf(@Nonnull final TelegrafRequest telegrafRequest);
+    Telegraf createTelegraf(@Nonnull final TelegrafPluginRequest telegrafPluginRequest);
 
     /**
      * Created default Telegraf Agent configuration.
@@ -219,6 +220,17 @@ public interface TelegrafsApi {
     Telegraf updateTelegraf(@Nonnull final String telegrafID,
                             @Nonnull final TelegrafRequest telegrafRequest);
 
+    /**
+     * Update a telegraf config.
+     *
+     * @param telegrafID      ID of telegraf config
+     * @param telegrafRequest telegraf config update to apply
+     * @return An updated telegraf
+     */
+    @Nonnull
+    Telegraf updateTelegraf(@Nonnull final String telegrafID,
+                            @Nonnull final TelegrafPluginRequest telegrafRequest);
+
     /**
      * Delete a telegraf config.
      *
diff --git a/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java b/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java
index e171a4a62e..8ae7058101 100644
--- a/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java
+++ b/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java
@@ -21,18 +21,6 @@
  */
 package com.influxdb.client.internal;
 
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
 import com.influxdb.client.TelegrafsApi;
 import com.influxdb.client.domain.AddResourceMemberRequestBody;
 import com.influxdb.client.domain.Label;
@@ -53,9 +41,19 @@ import com.influxdb.client.domain.User;
 import com.influxdb.client.service.TelegrafsService;
 import com.influxdb.internal.AbstractRestClient;
 import com.influxdb.utils.Arguments;
-
+import org.jetbrains.annotations.NotNull;
 import retrofit2.Call;
 
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 /**
  * @author Jakub Bednar (bednar@github) (28/02/2019 10:25)
  */
@@ -123,25 +121,21 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
         // append agent configuration
         config.append("[agent]").append("\n");
-        agentConfiguration.forEach((key, value) -> appendConfiguration(config, key, value));
-
-        config.append("\n");
 
-        // append plugins configuration
-        for (TelegrafPlugin plugin : plugins) {
-            if (plugin.getDescription() != null) {
-                config.append("#").append(plugin.getDescription()).append("\n");
-            }
-            config.append("[[").append(plugin.getType()).append(".").append(plugin.getName()).append("]]").append("\n");
-            plugin.getConfig().forEach((key, value) -> appendConfiguration(config, key, value));
-        }
-
-        TelegrafRequest telegrafRequest = new TelegrafRequest()
+        TelegrafPluginRequest telegrafRequest = new TelegrafPluginRequest()
                 .name(name)
                 .description(description)
                 .orgID(orgID)
                 .config(config.toString());
 
+        for (TelegrafPlugin plugin : plugins) {
+            telegrafRequest.addPluginsItem(new TelegrafPluginRequestPlugins()
+                    .description(plugin.getDescription())
+                    .type(plugin.getType().getValue())
+                    .name(plugin.getName())
+                    .config(plugin.getConfig()));
+        }
+
         return createTelegraf(telegrafRequest);
     }
 
@@ -157,7 +151,7 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
         Arguments.checkNonEmpty(orgID, "orgID");
         Arguments.checkNonEmpty(config, "config");
 
-        TelegrafRequest telegrafRequest = new TelegrafRequest()
+        TelegrafPluginRequest telegrafRequest = new TelegrafPluginRequest()
                 .name(name)
                 .description(description)
                 .orgID(orgID)
@@ -184,11 +178,11 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
     @Nonnull
     @Override
-    public Telegraf createTelegraf(@Nonnull final TelegrafRequest telegrafRequest) {
+    public Telegraf createTelegraf(@Nonnull final TelegrafPluginRequest telegrafPluginRequest) {
 
-        Arguments.checkNotNull(telegrafRequest, "telegrafRequest");
+        Arguments.checkNotNull(telegrafPluginRequest, "telegrafPluginRequest");
 
-        Call<Telegraf> call = service.postTelegrafs(telegrafRequest, null);
+        Call<Telegraf> call = service.postTelegrafs(telegrafPluginRequest, null);
 
         return execute(call);
     }
@@ -215,7 +209,7 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
         Arguments.checkNotNull(telegraf, "TelegrafConfig");
 
-        TelegrafRequest telegrafRequest = toTelegrafRequest(telegraf);
+        TelegrafPluginRequest telegrafRequest = toTelegrafRequest(telegraf);
 
         return updateTelegraf(telegraf.getId(), telegrafRequest);
     }
@@ -227,8 +221,16 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
         Arguments.checkNotNull(telegrafRequest, "TelegrafRequest");
 
+        return updateTelegraf(telegrafID, toPluginRequest(telegrafRequest));
+    }
+
+    @NotNull
+    @Override
+    public Telegraf updateTelegraf(@Nonnull final String telegrafID,
+                                   @Nonnull final TelegrafPluginRequest telegrafPluginRequest) {
+        Arguments.checkNotNull(telegrafPluginRequest, "TelegrafPluginRequest");
 
-        Call<Telegraf> telegrafConfigCall = service.putTelegrafsID(telegrafID, telegrafRequest, null);
+        Call<Telegraf> telegrafConfigCall = service.putTelegrafsID(telegrafID, telegrafPluginRequest, null);
 
         return execute(telegrafConfigCall);
     }
@@ -272,7 +274,7 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
         Arguments.checkNotNull(telegraf, "TelegrafConfig");
 
 
-        TelegrafRequest telegrafRequest = toTelegrafRequest(telegraf);
+        TelegrafPluginRequest telegrafRequest = toTelegrafRequest(telegraf);
 
         Telegraf created = createTelegraf(telegrafRequest);
         created.setName(clonedName);
@@ -538,11 +540,11 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
     }
 
     @Nonnull
-    private TelegrafRequest toTelegrafRequest(@Nonnull final Telegraf telegraf) {
+    private TelegrafPluginRequest toTelegrafRequest(@Nonnull final Telegraf telegraf) {
 
         Arguments.checkNotNull(telegraf, "telegraf");
 
-        TelegrafRequest telegrafRequest = new TelegrafRequest();
+        TelegrafPluginRequest telegrafRequest = new TelegrafPluginRequest();
         telegrafRequest.setName(telegraf.getName());
         telegrafRequest.setDescription(telegraf.getDescription());
         telegrafRequest.setConfig(telegraf.getConfig());
@@ -552,30 +554,13 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
         return telegrafRequest;
     }
 
-    private void appendConfiguration(@Nonnull final StringBuilder config,
-                                     @Nonnull final String key,
-                                     @Nullable final Object value) {
-        if (value != null) {
-            config.append("  ").append(key).append(" = ");
-            if (value instanceof Collection) {
-                Stream<String> values = ((Collection<Object>) value).stream()
-                        .map(it -> {
-                            if (it instanceof  String) {
-                                return "\"" + it.toString() + "\"";
-                            }
-                            return it.toString();
-                        });
-                config.append("[");
-                config.append(values.collect(Collectors.joining(", ")));
-                config.append("]");
-            } else if (value instanceof String) {
-                config.append('"');
-                config.append(value.toString());
-                config.append('"');
-            } else {
-                config.append(value.toString());
-            }
-            config.append("\n");
-        }
+    @Nonnull
+    private TelegrafPluginRequest toPluginRequest(final @Nonnull TelegrafRequest telegrafRequest) {
+        return new TelegrafPluginRequest()
+                .name(telegrafRequest.getName())
+                .description(telegrafRequest.getDescription())
+                .metadata(telegrafRequest.getMetadata())
+                .config(telegrafRequest.getConfig())
+                .orgID(telegrafRequest.getOrgID());
     }
 }
\ No newline at end of file
diff --git a/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java b/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java
index 24239705fe..273cdf3b20 100644
--- a/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java
+++ b/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java
@@ -21,22 +21,16 @@
  */
 package com.influxdb.client;
 
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nonnull;
-
+import com.influxdb.LogLevel;
 import com.influxdb.client.domain.Label;
 import com.influxdb.client.domain.Organization;
 import com.influxdb.client.domain.ResourceMember;
 import com.influxdb.client.domain.ResourceOwner;
 import com.influxdb.client.domain.Telegraf;
 import com.influxdb.client.domain.TelegrafPlugin;
+import com.influxdb.client.domain.TelegrafPluginRequest;
 import com.influxdb.client.domain.User;
 import com.influxdb.exceptions.NotFoundException;
-
 import com.moandjiezana.toml.Toml;
 import org.assertj.core.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
@@ -45,6 +39,13 @@ import org.junit.jupiter.api.Test;
 import org.junit.platform.runner.JUnitPlatform;
 import org.junit.runner.RunWith;
 
+import javax.annotation.Nonnull;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 /**
  * @author Jakub Bednar (bednar@github) (28/02/2019 10:31)
  */
@@ -68,6 +69,7 @@ class ITTelegrafsApi extends AbstractITClientTest {
     @Test
     void createTelegrafConfig() {
 
+        influxDBClient.setLogLevel(LogLevel.BODY);
         String name = generateName("TelegrafConfig");
 
         TelegrafPlugin output = newOutputPlugin();
@@ -113,28 +115,6 @@ class ITTelegrafsApi extends AbstractITClientTest {
         Assertions.assertThat(inputs.get(0)).hasEntrySatisfying("percpu", value -> Assertions.assertThat(value).isEqualTo(true));
     }
 
-    @Test
-    void createTelegrafWithCustomPlugin() {
-
-        String name = generateName("TelegrafConfig");
-
-        TelegrafPlugin custom = new TelegrafPlugin().type(TelegrafPlugin.TypeEnum.INPUTS).name("custom")
-                .putConfigItem("bin", "/sbin/ping")
-                .putConfigItem("count", 10)
-                .putConfigItem("host", "8.8.8.8");
-
-        Telegraf telegrafConfig = telegrafsApi
-                .createTelegraf(name, "test-config", organization.getId(), Collections.singletonList(custom));
-
-        Toml toml = new Toml().read(telegrafConfig.getConfig());
-
-        List<HashMap<String, Object>> inputs = toml.getList("inputs.custom");
-        Assertions.assertThat(inputs.get(0))
-                .hasEntrySatisfying("bin", value -> Assertions.assertThat(value).isEqualTo("/sbin/ping"))
-                .hasEntrySatisfying("count", value -> Assertions.assertThat(value).isEqualTo(10L))
-                .hasEntrySatisfying("host", value -> Assertions.assertThat(value).isEqualTo("8.8.8.8"));
-    }
-
     @Test
     void pluginWithoutConfiguration() {
 
@@ -155,10 +135,15 @@ class ITTelegrafsApi extends AbstractITClientTest {
         telegrafConfig.setDescription("updated");
         telegrafConfig.setConfig("my-updated-config");
 
-        telegrafConfig = telegrafsApi.updateTelegraf(telegrafConfig);
+        TelegrafPluginRequest updated = new TelegrafPluginRequest()
+                .name(telegrafConfig.getName())
+                .description("updated")
+                .metadata(telegrafConfig.getMetadata())
+                .orgID(telegrafConfig.getOrgID());
+
+        telegrafConfig = telegrafsApi.updateTelegraf(telegrafConfig.getId(), updated);
 
         Assertions.assertThat(telegrafConfig.getDescription()).isEqualTo("updated");
-        Assertions.assertThat(telegrafConfig.getConfig()).isEqualTo("my-updated-config");
     }
 
     @Test
@@ -426,8 +411,7 @@ class ITTelegrafsApi extends AbstractITClientTest {
                 .putConfigItem("percpu", true)
                 .putConfigItem("totalcpu", true)
                 .putConfigItem("collect_cpu_time", false)
-                .putConfigItem("report_active", false)
-                .putConfigItem("avoid_null", null);
+                .putConfigItem("report_active", false);
     }
 
     @Nonnull
