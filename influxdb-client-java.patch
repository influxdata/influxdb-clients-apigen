diff --git a/client/src/main/java/com/influxdb/client/TelegrafsApi.java b/client/src/main/java/com/influxdb/client/TelegrafsApi.java
index fd886a48e0..836d2d5721 100644
--- a/client/src/main/java/com/influxdb/client/TelegrafsApi.java
+++ b/client/src/main/java/com/influxdb/client/TelegrafsApi.java
@@ -36,7 +36,7 @@ import com.influxdb.client.domain.ResourceMember;
 import com.influxdb.client.domain.ResourceOwner;
 import com.influxdb.client.domain.Telegraf;
 import com.influxdb.client.domain.TelegrafPlugin;
-import com.influxdb.client.domain.TelegrafRequest;
+import com.influxdb.client.domain.TelegrafPluginRequest;
 import com.influxdb.client.domain.TelegrafRequestMetadata;
 import com.influxdb.client.domain.User;
 
@@ -48,7 +48,7 @@ import com.influxdb.client.domain.User;
  * The following example shows how to create a Telegraf configuration with an output plugin and an input cpu plugin.
  * <pre>
  * TelegrafPlugin output = new TelegrafPlugin()
- *                 .type(TelegrafPlugin.TypeEnum.OUTPUTS)
+ *                 .type(TelegrafPlugin.TypeEnum.OUTPUT)
  *                 .name("influxdb_v2")
  *                 .description("my instance")
  *                 .putConfigItem("organization", "my-org")
@@ -57,7 +57,7 @@ import com.influxdb.client.domain.User;
  *                 .putConfigItem("urls", Collections.singletonList("http://127.0.0.1:9999"));
  *
  * TelegrafPlugin cpu = new TelegrafPlugin()
- *                 .type(TelegrafPlugin.TypeEnum.INPUTS)
+ *                 .type(TelegrafPlugin.TypeEnum.INPUT)
  *                 .name("cpu")
  *                 .putConfigItem("percpu", true)
  *                 .putConfigItem("totalcpu", true)
@@ -174,11 +174,11 @@ public interface TelegrafsApi {
     /**
      * Create a telegraf config.
      *
-     * @param telegrafRequest Telegraf Configuration to create
+     * @param telegrafPluginRequest Telegraf Configuration to create
      * @return Telegraf config created
      */
     @Nonnull
-    Telegraf createTelegraf(@Nonnull final TelegrafRequest telegrafRequest);
+    Telegraf createTelegraf(@Nonnull final TelegrafPluginRequest telegrafPluginRequest);
 
     /**
      * Created default Telegraf Agent configuration.
@@ -217,7 +217,7 @@ public interface TelegrafsApi {
      */
     @Nonnull
     Telegraf updateTelegraf(@Nonnull final String telegrafID,
-                            @Nonnull final TelegrafRequest telegrafRequest);
+                            @Nonnull final TelegrafPluginRequest telegrafRequest);
 
     /**
      * Delete a telegraf config.
diff --git a/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java b/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java
index e171a4a62e..c42e31455a 100644
--- a/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java
+++ b/client/src/main/java/com/influxdb/client/internal/TelegrafsApiImpl.java
@@ -28,8 +28,6 @@ import java.util.List;
 import java.util.Map;
 import java.util.logging.Level;
 import java.util.logging.Logger;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
@@ -46,7 +44,8 @@ import com.influxdb.client.domain.ResourceOwner;
 import com.influxdb.client.domain.ResourceOwners;
 import com.influxdb.client.domain.Telegraf;
 import com.influxdb.client.domain.TelegrafPlugin;
-import com.influxdb.client.domain.TelegrafRequest;
+import com.influxdb.client.domain.TelegrafPluginRequest;
+import com.influxdb.client.domain.TelegrafPluginRequestPlugins;
 import com.influxdb.client.domain.TelegrafRequestMetadata;
 import com.influxdb.client.domain.Telegrafs;
 import com.influxdb.client.domain.User;
@@ -123,25 +122,21 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
         // append agent configuration
         config.append("[agent]").append("\n");
-        agentConfiguration.forEach((key, value) -> appendConfiguration(config, key, value));
 
-        config.append("\n");
-
-        // append plugins configuration
-        for (TelegrafPlugin plugin : plugins) {
-            if (plugin.getDescription() != null) {
-                config.append("#").append(plugin.getDescription()).append("\n");
-            }
-            config.append("[[").append(plugin.getType()).append(".").append(plugin.getName()).append("]]").append("\n");
-            plugin.getConfig().forEach((key, value) -> appendConfiguration(config, key, value));
-        }
-
-        TelegrafRequest telegrafRequest = new TelegrafRequest()
+        TelegrafPluginRequest telegrafRequest = new TelegrafPluginRequest()
                 .name(name)
                 .description(description)
                 .orgID(orgID)
                 .config(config.toString());
 
+        for (TelegrafPlugin plugin : plugins) {
+            telegrafRequest.addPluginsItem(new TelegrafPluginRequestPlugins()
+                    .description(plugin.getDescription())
+                    .type(plugin.getType().getValue())
+                    .name(plugin.getName())
+                    .config(plugin.getConfig()));
+        }
+
         return createTelegraf(telegrafRequest);
     }
 
@@ -157,7 +152,7 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
         Arguments.checkNonEmpty(orgID, "orgID");
         Arguments.checkNonEmpty(config, "config");
 
-        TelegrafRequest telegrafRequest = new TelegrafRequest()
+        TelegrafPluginRequest telegrafRequest = new TelegrafPluginRequest()
                 .name(name)
                 .description(description)
                 .orgID(orgID)
@@ -184,11 +179,11 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
     @Nonnull
     @Override
-    public Telegraf createTelegraf(@Nonnull final TelegrafRequest telegrafRequest) {
+    public Telegraf createTelegraf(@Nonnull final TelegrafPluginRequest telegrafPluginRequest) {
 
-        Arguments.checkNotNull(telegrafRequest, "telegrafRequest");
+        Arguments.checkNotNull(telegrafPluginRequest, "telegrafPluginRequest");
 
-        Call<Telegraf> call = service.postTelegrafs(telegrafRequest, null);
+        Call<Telegraf> call = service.postTelegrafs(telegrafPluginRequest, null);
 
         return execute(call);
     }
@@ -215,7 +210,7 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
         Arguments.checkNotNull(telegraf, "TelegrafConfig");
 
-        TelegrafRequest telegrafRequest = toTelegrafRequest(telegraf);
+        TelegrafPluginRequest telegrafRequest = toTelegrafRequest(telegraf);
 
         return updateTelegraf(telegraf.getId(), telegrafRequest);
     }
@@ -223,12 +218,10 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
     @Nonnull
     @Override
     public Telegraf updateTelegraf(@Nonnull final String telegrafID,
-                                   @Nonnull final TelegrafRequest telegrafRequest) {
-
-        Arguments.checkNotNull(telegrafRequest, "TelegrafRequest");
-
+                                   @Nonnull final TelegrafPluginRequest telegrafPluginRequest) {
+        Arguments.checkNotNull(telegrafPluginRequest, "TelegrafPluginRequest");
 
-        Call<Telegraf> telegrafConfigCall = service.putTelegrafsID(telegrafID, telegrafRequest, null);
+        Call<Telegraf> telegrafConfigCall = service.putTelegrafsID(telegrafID, telegrafPluginRequest, null);
 
         return execute(telegrafConfigCall);
     }
@@ -272,7 +265,7 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
         Arguments.checkNotNull(telegraf, "TelegrafConfig");
 
 
-        TelegrafRequest telegrafRequest = toTelegrafRequest(telegraf);
+        TelegrafPluginRequest telegrafRequest = toTelegrafRequest(telegraf);
 
         Telegraf created = createTelegraf(telegrafRequest);
         created.setName(clonedName);
@@ -538,11 +531,11 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
     }
 
     @Nonnull
-    private TelegrafRequest toTelegrafRequest(@Nonnull final Telegraf telegraf) {
+    private TelegrafPluginRequest toTelegrafRequest(@Nonnull final Telegraf telegraf) {
 
         Arguments.checkNotNull(telegraf, "telegraf");
 
-        TelegrafRequest telegrafRequest = new TelegrafRequest();
+        TelegrafPluginRequest telegrafRequest = new TelegrafPluginRequest();
         telegrafRequest.setName(telegraf.getName());
         telegrafRequest.setDescription(telegraf.getDescription());
         telegrafRequest.setConfig(telegraf.getConfig());
@@ -551,31 +544,4 @@ final class TelegrafsApiImpl extends AbstractRestClient implements TelegrafsApi
 
         return telegrafRequest;
     }
-
-    private void appendConfiguration(@Nonnull final StringBuilder config,
-                                     @Nonnull final String key,
-                                     @Nullable final Object value) {
-        if (value != null) {
-            config.append("  ").append(key).append(" = ");
-            if (value instanceof Collection) {
-                Stream<String> values = ((Collection<Object>) value).stream()
-                        .map(it -> {
-                            if (it instanceof  String) {
-                                return "\"" + it.toString() + "\"";
-                            }
-                            return it.toString();
-                        });
-                config.append("[");
-                config.append(values.collect(Collectors.joining(", ")));
-                config.append("]");
-            } else if (value instanceof String) {
-                config.append('"');
-                config.append(value.toString());
-                config.append('"');
-            } else {
-                config.append(value.toString());
-            }
-            config.append("\n");
-        }
-    }
 }
\ No newline at end of file
diff --git a/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java b/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java
index 24239705fe..64b71bf80e 100644
--- a/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java
+++ b/client/src/test/java/com/influxdb/client/ITTelegrafsApi.java
@@ -34,6 +34,7 @@ import com.influxdb.client.domain.ResourceMember;
 import com.influxdb.client.domain.ResourceOwner;
 import com.influxdb.client.domain.Telegraf;
 import com.influxdb.client.domain.TelegrafPlugin;
+import com.influxdb.client.domain.TelegrafPluginRequest;
 import com.influxdb.client.domain.User;
 import com.influxdb.exceptions.NotFoundException;
 
@@ -113,28 +114,6 @@ class ITTelegrafsApi extends AbstractITClientTest {
         Assertions.assertThat(inputs.get(0)).hasEntrySatisfying("percpu", value -> Assertions.assertThat(value).isEqualTo(true));
     }
 
-    @Test
-    void createTelegrafWithCustomPlugin() {
-
-        String name = generateName("TelegrafConfig");
-
-        TelegrafPlugin custom = new TelegrafPlugin().type(TelegrafPlugin.TypeEnum.INPUTS).name("custom")
-                .putConfigItem("bin", "/sbin/ping")
-                .putConfigItem("count", 10)
-                .putConfigItem("host", "8.8.8.8");
-
-        Telegraf telegrafConfig = telegrafsApi
-                .createTelegraf(name, "test-config", organization.getId(), Collections.singletonList(custom));
-
-        Toml toml = new Toml().read(telegrafConfig.getConfig());
-
-        List<HashMap<String, Object>> inputs = toml.getList("inputs.custom");
-        Assertions.assertThat(inputs.get(0))
-                .hasEntrySatisfying("bin", value -> Assertions.assertThat(value).isEqualTo("/sbin/ping"))
-                .hasEntrySatisfying("count", value -> Assertions.assertThat(value).isEqualTo(10L))
-                .hasEntrySatisfying("host", value -> Assertions.assertThat(value).isEqualTo("8.8.8.8"));
-    }
-
     @Test
     void pluginWithoutConfiguration() {
 
@@ -155,10 +134,15 @@ class ITTelegrafsApi extends AbstractITClientTest {
         telegrafConfig.setDescription("updated");
         telegrafConfig.setConfig("my-updated-config");
 
-        telegrafConfig = telegrafsApi.updateTelegraf(telegrafConfig);
+        TelegrafPluginRequest updated = new TelegrafPluginRequest()
+                .name(telegrafConfig.getName())
+                .description("updated")
+                .metadata(telegrafConfig.getMetadata())
+                .orgID(telegrafConfig.getOrgID());
+
+        telegrafConfig = telegrafsApi.updateTelegraf(telegrafConfig.getId(), updated);
 
         Assertions.assertThat(telegrafConfig.getDescription()).isEqualTo("updated");
-        Assertions.assertThat(telegrafConfig.getConfig()).isEqualTo("my-updated-config");
     }
 
     @Test
@@ -403,8 +387,6 @@ class ITTelegrafsApi extends AbstractITClientTest {
         Assertions.assertThat(cloned.getName()).isEqualTo(name);
         Assertions.assertThat(cloned.getOrgID()).isEqualTo(organization.getId());
         Assertions.assertThat(cloned.getDescription()).isEqualTo(source.getDescription());
-        Assertions.assertThat(cloned.getConfig()).isEqualTo(source.getConfig());
-        Assertions.assertThat(cloned.getMetadata().getBuckets()).isEqualTo(source.getMetadata().getBuckets());
 
         List<Label> labels = telegrafsApi.getLabels(cloned);
         Assertions.assertThat(labels).hasSize(1);
@@ -421,25 +403,24 @@ class ITTelegrafsApi extends AbstractITClientTest {
     @Nonnull
     private TelegrafPlugin newCpuPlugin() {
         return new TelegrafPlugin()
-                .type(TelegrafPlugin.TypeEnum.INPUTS)
+                .type(TelegrafPlugin.TypeEnum.INPUT)
                 .name("cpu")
                 .putConfigItem("percpu", true)
                 .putConfigItem("totalcpu", true)
                 .putConfigItem("collect_cpu_time", false)
-                .putConfigItem("report_active", false)
-                .putConfigItem("avoid_null", null);
+                .putConfigItem("report_active", false);
     }
 
     @Nonnull
     private TelegrafPlugin newKernelPlugin() {
-        return new TelegrafPlugin().type(TelegrafPlugin.TypeEnum.INPUTS).name("kernel");
+        return new TelegrafPlugin().type(TelegrafPlugin.TypeEnum.INPUT).name("kernel");
     }
 
     @Nonnull
     private TelegrafPlugin newOutputPlugin() {
 
         return new TelegrafPlugin()
-                .type(TelegrafPlugin.TypeEnum.OUTPUTS)
+                .type(TelegrafPlugin.TypeEnum.OUTPUT)
                 .name("influxdb_v2")
                 .description("my instance")
                 .putConfigItem("organization", "my-org")
